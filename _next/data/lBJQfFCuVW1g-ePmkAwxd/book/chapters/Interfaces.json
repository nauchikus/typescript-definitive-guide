{"pageProps":{"urlResolver":{"image":"https://raw.githubusercontent.com/nauchikus/typescript-definitive-guide/master/book/ru/chapters/021.(Типы) Interfaces/images/"},"sectionInfoAll":[{"key":"Interfaces","elementId":"Interfaces","markdown":"# Interfaces\n\nНесмотря на то, что тема относящаяся к интерфейсам очень проста, именно она вызывает наибольшее количество вопросов у начинающих разработчиков. Поэтому, такие вопросы как _для чего нужны интерфейсы_, _когда их применять, а когда нет_, будут подробно рассмотрены в этой главе."},{"key":"Interfaces_0","elementId":"Obshchaya_teoriya","markdown":"## Общая теория\n\nПо факту, интерфейс затрагивает сразу несколько аспектов создания программ, относящихся к проектированию, реализации, конечной сборке. Поэтому, что бы понять предназначение интерфейса, необходимо рассмотреть каждый аспект по отдельности.\n\nПервый аспект — реализация — предлагает рассматривать создаваемые экземпляры как социальные объекты, чья публичная часть инфраструктуры была оговорена в контракте, к коему относится интерфейс. Другими словами, интерфейс — это контракт, реализация которого гарантирует наличие оговоренных в нем членов потребителю экземпляра. Поскольку интерфейс описывает исключительно типы членов объекта (поля, свойства, сигнатуры методов), они не могут гарантировать, что сопряженная с ними логика будет соответствовать каким-либо критериям. По этому случаю была принята методология называемая _контрактное программирование_. Несмотря на то, что данная методология вызывает непонимание у большинства начинающих разработчиков, в действительности она очень проста. За этим таинственным термином скрываются рекомендации придерживаться устной или письменной спецификации при реализации логики, сопряженной с оговоренными в интерфейсе членами.\n\nВторой аспект — проектирование — предлагает проектировать объекты менее независимыми за счет отказа от конкретных типов (классов) в пользу интерфейсов. Ведь пока тип переменной или параметра представляется классовым типом, невозможно будет присвоить значение соответствующее этому типу, но не совместимое с ним. Под соответствующим подразумевается соответствие по всем обязательным признакам, но не состоящим в отношениях наследования. И хотя в _TypeScript_ из-за реализации _номинативной типизации_ подобной проблемы не существует, по возможности рекомендуется придерживаться классических взглядов.\n\nТретий аспект — сборка — вытекает из второго и предполагает уменьшение размера компилируемого пакета (_bundle_) за счет отказа от конкретных типов (классов). Фактически, если какой-либо объект требуется пакету лишь для выполнения операций над ним, последнему вовсе не нужно содержать определение первого. Другими словами, скомпилированный пакет не должен включать определение класса со всей его логикой только потому, что он указан в качестве типа. Для этого как нельзя лучше подходят типы, представленные интерфейсами. Хотя нельзя не упомянуть, что данная проблема не имеет никакого практического отношения к разработчикам на языке _TypeScript_, поскольку его (или точнее сказать _JavaScript_) модульная система лишена подобного недостатка.\n\nВот эти несколько строк, описывающие оговоренные в самом начале аспекты, заключают в себе ответы на все возможные вопросы, которые только могут возникнуть относительно темы сопряженной с интерфейсами. Если ещё более доступно, то интерфейсы нужны для снижения зависимости и наложения обязательств на реализующие их классы. Интерфейсы стоит применять всегда и везде, где это возможно. Это не только повысит семантическую привлекательность кода, но и сделает его более поддерживаемым.\n\nНе лишним будет добавить, что интерфейсы являются фундаментальной составляющей идеологии как типизированных языков, так и объектно-ориентированного программирования.\n\nТакая известная группа программистов, как _“Банда четырех”_ (_Gang of Four_, сокращённо _GoF_), в своей книге, положившей начало популяризации шаблонов проектирования, описывали интерфейс как ключевую концепцию _объектно-ориентированного программирования_ (_ооп_). Понятие интерфейса является настолько важным, что в книге был сформулирован принцип объектно-ориентированного проектирования, который звучит так: _Программируйте в соответствии с интерфейсом, а не с реализацией._\n\nДругими словами, авторы советуют создавать систему, которой вообще ничего не будет известно о реализации. Проще говоря, создаваемая система должна быть построена на типах, определяемых интерфейсами, а не на типах, определяемых классами.\n\nС теорией закончено. Осталось подробно рассмотреть реализацию интерфейсов в _TypeScript_."},{"key":"Interfaces_1","elementId":"Interfeis_v_TypeScript","markdown":"## Интерфейс в TypeScript\n\n_TypeScript_ предлагает новый тип данных, определяемый с помощью синтаксической конструкции называемой _интерфейс_ (`interface`). \n\n_Interface_ — это синтаксическая конструкция, предназначенная для описания открытой (`public`) части объекта без реализации (_api_). Хотя не будет лишним упомянуть, что существуют языки позволяющие реализовывать в интерфейсах поведение, рассматриваемое как поведение по умолчанию.\n\nКласс, реализующий интерфейс, обязан реализовать все описанные в нём члены. Поэтому интерфейс является гарантией наличия описанных в нем характеристик у реализующего его объекта. Все члены, описанные в интерфейсе, неявно имеют модификатор доступа `public`. Интерфейс предназначен для описания _api_ или другими словами состояния и поведения предназначенного для взаимодействия внешнего мира с объектом."},{"key":"Interfaces_2","elementId":"Obyavlenie_(declaration)","markdown":"## Объявление (declaration)\n\nВ _TypeScript_ интерфейс объявляется с помощью ключевого слова `interface`, после которого указывается идентификатор (имя), за которым следует заключенное в фигурные скобки тело содержащее описание.\n\n`````ts\ninterface Identifier {\n    // тело интерфейса \n}\n`````\n\nОбъявление интерфейса возможно как в контексте модуля, так и в контексте функции или метода.\n\n`````ts\ninterface Identifier {} // контекст модуля\n\nclass T {\n    public method(): void {\n        interface Identifier {} // контекст метода\n    }\n}\n\nfunction func(): void {\n   interface Identifier {} // контекст функции\n}\n`````"},{"key":"Interfaces_3","elementId":"Konvencii_imenovaniya_interfeisov","markdown":"## Конвенции именования интерфейсов\n\nПрежде чем продолжить, нужно обратить внимание на такой аспект, как конвенции именования интерфейсов. Существует два вида именования. \n\nПервый вид конвенций родом из языка _Java_ — они предлагают именовать интерфейсы точно так же как и классы. Допускаются имена прилагательные.\n\n`````ts\ninterface Identifier {}\n`````\n\nВторой вид предлагает использовать конвенции языка _C#_, по которым интерфейсы именуются так же как классы, но с префиксом `I`, что является сокращением от _Interface_. Такой вид записи получил название _“венгерская нотация”_ в честь программиста венгерского происхождения, работавшего в компании _MicroSoft_. Допускаются имена прилагательные.\n\n`````ts\ninterface IIdentifier {}\n`````\n\nЧтобы сразу расставить все точки над i, стоит заметить, что в дальнейшем идентификаторы интерфейсов будут указываться по конвенциям _C#_."},{"key":"Interfaces_4","elementId":"Realizaciya_interfeisa_(implements)","markdown":"## Реализация интерфейса (implements)\n\nКак уже было сказано в самом начале, все члены интерфейса являются открытыми (`public`) и их объявление не может содержать модификатор `static`. Кроме того, в _TypeScript_ интерфейсы не могут содержать реализацию.\n\nКласс, реализующий интерфейс, обязан реализовывать его в полной мере. Любой класс, который хочет реализовать интерфейс, должен указать это с помощью ключевого слова `implements`, после которого следует идентификатор реализуемого интерфейса. Указание реализации классом интерфейса располагается между идентификатором класса и его телом. \n\n`````ts\ninterface IAnimal {\n    nickname: string;\n    \n    execute(command: string): void;\n}\n\nclass Bird implements IAnimal {\n    nickname: string;\n    \n    execute(command: string): void {}\n}\n`````\n\nОдин класс может реализовывать сколько угодно интерфейсов. В этом случае реализуемые интерфейсы должны быть перечислены через запятую.\n\n`````ts\ninterface IAnimal {}\ninterface IOviparous {} // указывает на возможность откладывать яйца\n\nclass Bird implements IAnimal, IOviparous {} \n`````\n\nВ случае, когда класс расширяет другой класс, указание реализации (`implements`) следует после указания расширения (`extends`).\n\n`````ts\ninterface IAnimal {}\ninterface IOviparous {} \n\nclass Bird implements IAnimal, IOviparous {} \n\ninterface IFlyable {}\n\nclass Eagle extends Bird implements IFlyable {}\n`````"},{"key":"Interfaces_5","elementId":"Deklaraciya_svoistv_get_i_set_(accessors)","markdown":"## Декларация свойств get и set (accessors)\n\nНесмотря на то, что в интерфейсе можно декларировать поля и методы, в нем нельзя декларировать свойства `get` и `set` (_аксессоры_). Но, несмотря на это, задекларированное в интерфейсе поле может быть совместимо не только с полем, но и аксессорами. При этом нет разницы, будет в объекте объявлен _getter_, _setter_ или оба одновременно.\n\n`````ts\ninterface IAnimal {\n    id: string;\n}\n\n// только get\nclass Bird implements IAnimal {\n    get id(): string {\n        return 'bird';\n    }\n}\n\n// только set\nclass Fish implements IAnimal {\n    set id(value: string) {}\n}\n\n// и get и set\nclass Insect implements IAnimal {\n    get id(): string {\n     return 'insect';\n    }\n\n    set id(value: string) {}\n}\n`````"},{"key":"Interfaces_6","elementId":"Ukazanie_interfeisa_v_kachestve_tipa_(interface_types)","markdown":"## Указание интерфейса в качестве типа (interface types)\n\nКласс, реализующий интерфейс, принадлежит к типу этого интерфейса. Класс, унаследованный от класса реализующего интерфейс, также наследует принадлежность к реализуемым им интерфейсам. В подобных сценариях говорят, что класс наследует интерфейс.\n\n`````ts\ninterface IAnimal {}\n\nclass Bird implements IAnimal {}\n\nclass Raven extends Bird {}\n\nlet bird: IAnimal = new Bird();\nlet raven: IAnimal = new Raven();\n`````\n\nКласс, реализующий множество интерфейсов, принадлежит к типу каждого из них. Когда экземпляр класса, реализующего интерфейс, присваивают ссылке с типом интерфейса, то говорят, что экземпляр был _ограничен_ типом интерфейса. То есть, функциональность экземпляра класса урезается до описанного в интерфейсе (подробнее об этом речь пойдет в главе [“Типизация - Совместимость объектов”](../038.(Типизация)%20Совместимость%20объектных%20типов%20(Compatible%20Object%20Types)) и [“Типизация - Совместимость функций”](../039.(Типизация)%20Совместимость%20функциональных%20типов%20(Compatible%20Function%20Types))).\n\n`````ts\ninterface IAnimal {\n    name: string;\n}\n\ninterface IFlyable {\n    flightHeight: number;\n}\n\ninterface IIdentifiable {\n    id: string;\n}\n\nclass Animal implements IAnimal {\n    constructor(readonly name: string) {}\n}\n\nclass Bird extends Animal implements IFlyable {\n    public flightHeight: number = 500;\n}\n\nvar animal: IAnimal = new Bird('bird'); // экземпляр Bird ограничен до типа IAnimal\nvar fly: IFlyable = new Bird('bird'); // экземпляр Bird ограничен до типа IFlyable\n`````\n\nНесмотря на то, что интерфейс является синтаксической конструкцией и может указываться в качестве типа, после компиляции от него не остается и следа. Это, в свою очередь, означает, что интерфейс, как тип данных, может использоваться только на этапе компиляции. Другими словами, компилятор сможет предупредить об ошибках несоответствия объекта описанному интерфейсу, но проверить на принадлежность к типу интерфейса с помощью операторов `typeof` или `instanceof` не получится, поскольку они выполняются во время выполнения программы. Но в _TypeScript_ существует механизм (который будет рассмотрен далее в главе [“Типизация - Защитники типа”](../036.(Типизация)%20Защитники%20типа)), позволяющий в некоторой мере решить эту проблему."},{"key":"Interfaces_7","elementId":"Rasshirenie_interfeisov_(extends_interface)","markdown":"## Расширение интерфейсов (extends interface)\n\nЕсли множество логически связанных интерфейсов требуется объединить в один тип, то нужно воспользоваться механизмом расширения интерфейсов. Наследование интерфейсов осуществляется с помощью ключевого слова `extends`, после которого через запятую идет один или несколько идентификаторов расширяемых интерфейсов.\n\n`````ts\ninterface IIdentifiable {}\ninterface ILiving {}\n\n// интерфейсы IIdentifiable и ILiving вместе образуют логически связанную композицию, \n// которую можно выделить в интерфейс IAnimal\ninterface IAnimal extends IIdentifiable, ILiving {}\n`````\n\nДля тех, кто только знакомится с понятием интерфейса, будет не лишним узнать о _“Принципе разделения интерфейсов”_ (_Interface Segregation Principle_ или сокращенно _ISP_), который гласит, что более крупные интерфейсы нужно _“дробить”_ на более мелкие интерфейсы. Но нужно понимать, что условия дробления диктуются конкретным приложением. Если во всех случаях руководствоваться только принципами, то можно раздуть небольшое приложение до масштабов вселенной.\n\nДля примера представьте приложение, которое только выводит в консоль информацию о животных. Так как над объектом `Animal` будет выполняться только одна операция, то можно не бояться разгневать богов объектно-ориентированного проектирования и включить все нужные характеристики прямо в интерфейс `IAnimal`.\n\n`````ts\ninterface IAnimal {\n    id: string;\n    age: number;\n}\n\nclass Animal implements IAnimal {\n    public age: number = 0;\n    \n    constructor(readonly id: string) {}\n}\n\nclass AnimalUtil {\n    public static print(animal: IAnimal): void {\n        console.log(animal);\n    }\n}\n\nclass Bird extends Animal {}\n\nclass Raven extends Bird {\n    constructor() {\n        super('raven');\n    }\n}\n\nlet raven: Raven = new Raven();\n\nAnimalUtil.print(raven);\n`````\n\nВ такой программе, кроме достоинства архитектора, ничего пострадать не может, так как она выполняет только одну операцию вывода информации о животном.\n\nНо, если переписать программу, что бы она выполняла несколько не связанных логически операций над одним типом, в данном случае `IAnimal`, то ситуация изменится на противоположную.\n\n`````ts\ninterface IAnimal {/*...*/}\n\nclass Animal implements IAnimal {/*...*/}\n\nclass AnimalUtil {\n    public static printId(animal: IAnimal): void {\n        console.log(animal.id); // вывод  id\n    }\n\n    public static printAge(animal: IAnimal): void {\n        console.log(animal.age); // вывод age\n    }\n}\n\nclass Bird extends Animal {}\nclass Raven extends Bird {/*...*/}\n\nlet raven: Raven = new Raven();\n\nAnimalUtil.printId(raven);\nAnimalUtil.printAge(raven);\n`````\n\nВ этом случае программа нарушает принцип _ISP_, так как статические методы `printId` и `printAge` получили доступ к данным, которые им не требуются для успешного выполнения. Это может привести к намеренной или случайной порче данных.\n\n`````ts\nclass AnimalUtil {\n    public static printId(animal: IAnimal): void {\n        // для успешного выполнения этого метода \n        // не требуется доступ к данным о animal.age\n        console.log(animal.id);\n    }\n\n public static printAge(animal: IAnimal): void {\n        // для успешного выполнения этого метода \n        // не требуется доступ к данным о animal.id\n        console.log(animal.age);\n    }\n}\n`````\n\nПоэтому в подобных ситуациях настоятельно рекомендуется _“дробить”_ типы интерфейсов на меньшие составляющие и затем ограничивать ими доступ к данным.\n\n`````ts\ninterface IIdentifiable {}\ninterface ILiving {}\n\ninterface IAnimal extends IIdentifiable, ILiving {/*...*/}\n\nclass Animal implements IAnimal {/*...*/}\n\nclass AnimalUtil {\n    public static printId(animal: IIdentifiable): void {\n        // параметр animal ограничен типом IIdentifiable\n        console.log(animal.id);\n    }\n\n    public static printAge(animal: ILiving): void {\n        // параметр animal ограничен типом ILiving\n        console.log(animal.age);\n    }\n}\n\nclass Bird extends Animal {}\nclass Raven extends Bird {/*...*/}\n\nlet raven: Raven = new Raven();\n\nAnimalUtil.printId(raven);\nAnimalUtil.printAge(raven);\n`````"},{"key":"Interfaces_8","elementId":"Rasshirenie_interfeisom_klassa_(extends_class)","markdown":"## Расширение интерфейсом класса (extends class)\n\nВ случаях, когда требуется создать интерфейс для уже имеющегося класса, нет необходимости тратить силы на перечисление членов класса в интерфейсе. В _TypeScript_ интерфейсу достаточно расширить тип класса.\n\nКогда интерфейс расширяет класс, он наследует описание членов, но не их реализацию.\n\n`````ts\nclass Animal {\n    nickname: string;\n    age: number;\n}\n\ninterface IAnimal extends Animal {}\n\nclass Bird implements IAnimal {\n    nickname:string;\n    age: number;\n}\n\nlet bird: IAnimal = new Bird();\n`````\n\nНо с расширением класса интерфейсом существует один нюанс.\n\nИнтерфейс, полученный путем расширения типа класса, может быть реализован только самим этим классом или его потомками, поскольку помимо публичных (`public`) также наследует закрытые (`private`) и защищенные (`protected`) члены.\n\n`````ts\nclass Animal {\n    private uid: string;\n    protected maxAge: number;\n    public name: string;\n}\n\ninterface IAnimal extends Animal {}\n\nclass Bird extends Animal implements IAnimal { // Ok\n    // private uid: string = ''; // Error, private\n    protected maxAge: number = 100; // Ok, protected\n    public name: string = 'bird'; // Ok,  public\n}\n\nclass Fish implements IAnimal { // Error\n    public name: string = 'fish';\n}\n\nlet bird: IAnimal = new Bird(); // Ok\nlet fish: IAnimal = new Fish(); // Error\n`````"},{"key":"Interfaces_9","elementId":"Opisanie_klassa_(funkcii-konstruktora)","markdown":"## Описание класса (функции-конструктора)\n\nИзвестный факт, что в _JavaScript_, а следовательно и в _TypeScript_, конструкция `class` — это лишь _“синтаксический сахар”_ над старой доброй функцией-конструктором. Эта особенность позволяет описывать интерфейсы не только для экземпляров класса, но и для самих классов (функций-конструкторов). Проще говоря, с помощью интерфейса можно описать как конструктор, так и статические члены класса, с одной оговоркой — этот интерфейс можно использовать только в качестве типа. То есть класс не может указывать реализацию такого интерфейса с помощью ключевого слова `implements` сопряженную с экземпляром, а не самим классом.\n\nОписание интерфейса для функции конструктора может потребоваться когда в качестве значения выступает сам класс.\n\nКонструктор указывается с помощью ключевого слова `new`, затем открываются скобки, в которых (при наличии) указываются параметры, а в конце указывается тип возвращаемого значения.\n \n`````ts\nnew(p1: type, p2: type): type;\n`````\n\nСтатические члены описываются так же, как и члены экземпляра.\n\n`````ts\ninterface IAnimal {\n    nickname: string;\n}\n\nclass Animal implements IAnimal {\n    nickname: string;\n\n    constructor(nickname: string) { \n        this.nickname = nickname;\n    }\n}\n\nclass Bird extends Animal {\n    static DEFAULT_NAME: string = 'bird';\n\n    static create(): IAnimal {\n        return new Bird(Bird.DEFAULT_NAME);\n    }\n}\n\nclass Fish extends Animal {\n    static DEFAULT_NAME: string = 'fish';\n    \n    static create(): IAnimal {\n        return new Fish(Fish.DEFAULT_NAME);\n    }\n}\n\nconst bird: Bird = new Bird('bird');\nconst fish: Fish = new Fish('fish');\n\nlet a: IAnimal[] = [bird, fish]; // Ok, массив экземпляров классов реализующих интерфейс IAnimal\nlet b: IAnimal[] = [Bird, Fish]; // Error, массив классов\n\ninterface IAnimalConstructor { // декларация интерфейса для класса\n    create(): IAnimal; // static method\n    new (nickname: string): IAnimal; // конструктор\n}\n\nlet c: IAnimalConstructor[] = [Bird, Fish]; // Ok, массив классов\nlet d: IAnimal[] = c.map(item => item.create()); // Ok, массив экземпляров классов реализующих интерфейс IAnimal\n`````"},{"key":"Interfaces_10","elementId":"Opisanie_funkcionalnogo_vyrajeniya","markdown":"## Описание функционального выражения\n\nПомимо экземпляров и самих классов, интерфейсы могут описывать функциональные выражения. Это очень удобно, когда функциональный тип имеет большую сигнатуру, которая делает код менее читабельным.\n\n`````ts\n// reduce(callbackFn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T;\nvar callback: (previousValue: number, currentValue: number, currentIndex: number, array: number[]) => number;\n`````\n\nВ большинстве подобных случаев можно прибегнуть к помощи вывода типов.\n\n`````ts\n// reduce(callbackFn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T;\n\nvar callback: (previousValue: number, currentValue: number, currentIndex: number, array: number[]) => number;\nvar callback = (previousValue: number, currentValue: number, currentIndex: number, array: number[]) => previousValue + currentValue;\n\nlet numberAll: number[] = [5, 5, 10, 30];\n\nlet sum: number = numberAll.reduce(callback); // 50\n`````\n\nНо в случае, если функциональное выражение является параметром функции, как например метод массива `reduce`, то решением может служить только явная декларация типа.\n\n`````ts\nclass Collection<T> {\n    reduce(callbackFn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T {\n        return null;\n    }\n}\n`````\n\nПоэтому при необходимости указать тип явно, помимо рассмотренного в главе [\"Типы - Type Queries (запросы типа), Alias (псевдонимы типа)\"](../017.(Типы)%20Type%20Queries%20(запросы%20типа),%20Alias%20(псевдонимы%20типа)) механизма создания псевдонимов типа (`type`), можно описать функциональное выражение с помощью интерфейса.\n\nДля этого необходимо в теле интерфейса описать сигнатуру функции без указания идентификатора.\n\n`````ts\ninterface ISumAll {\n    (...valueAll: number[]): number;\n}\n\nconst sumAll: ISumAll = (...valueAll: number[]) =>\n    valueAll.reduce((result, value) => result += value, 0);\n\n\nlet numberAll: number[] = [5, 5, 10, 30];\n\nlet sum: number = sumAll(...numberAll);\n`````"},{"key":"Interfaces_11","elementId":"Opisanie_indeksnyh_chlenov_v_obektnyh_tipov","markdown":"## Описание индексных членов в объектных типов\n\nИндексные члены подробно будут рассматриваться в главе [“Типы - Объектные типы с индексными членами (объектный тип с динамическими ключами)”](../022.(Типы)%20Объектные%20типы%20с%20индексными%20членами%20(объектный%20тип%20с%20динамическими%20ключами)), но не будет лишним и здесь коснутся этого механизма.\n\n`````ts\ninterface Identifier {\n    [BindingIdentifier: string]: Type;\n    [BindingIdentifier: number]: Type;\n}\n`````"},{"key":"Interfaces_12","elementId":"Inlain_interfeisy_(Inline_Interface)","markdown":"## Инлайн интерфейсы (Inline Interface)\n\nПомимо описания объекта в конструкции, объявляемой с помощью ключевого слова `interface`, тип объекта можно описать прямо в месте указания типа. Такой способ объявления типа неформально обозначается как _инлайн интерфейс_ (_inline interface_). Всё ранее описанное для типов интерфейсов, объявленных с помощью ключевого слова `interface`, в полной мере верно и для их инлайн аналогов.\n\nРазличие между ними заключается в том, что второй обладает только телом и объявляется прямо в аннотации типа.\n\n`````ts\nlet identifier: { p1: type, p2: type };\n`````\n\nИнтерфейс, объявленный с помощью ключевого слова `interface`, считается идентичным инлайн интерфейсу, если их описание совпадает. Но стоит обратить внимание, что это возможно благодаря структурной типизации, которая рассматривается в главе [“Экскурс в типизацию - Совместимость типов на основе вида типизации”](../009.(Экскурс%20в%20типизацию)%20Совместимость%20типов%20на%20основе%20вида%20типизации).\n\n`````ts\ninterface IAnimal {\n    nickname: string;\n}\n\nclass Bird implements IAnimal {\n    nickname: string;\n}\nclass Fish implements IAnimal {\n    nickname: string;\n}\n\nlet bird: IAnimal = new Bird(); // Ok\nlet fish: { nickname: string } = new Fish(); // Ok\n`````\n\nКак было сказано ранее, инлайн интерфейс можно объявлять в тех местах, в которых допускается указание типа. Тем не менее, реализовывать (`implements`) и расширять (`extends`) инлайн интерфейс нельзя. \n\n`````ts\ninterface IT1 {}\ninterface IT2 {}\n\ninterface IT3 extends { f1: IT1, f2: IT2 } { // Error\n\n}\n\nclass T4 implements { f1: T1, f2: T2 } { // Error\n\n}\n`````\n\nХотя последнее утверждение и не совсем верно. В дальнейшем будет рассказано о такой замечательной конструкции, как обобщения (глава [“Типы - Обобщения (Generics)”](../032.(Типы)%20Обобщения%20(Generics))), в которых, как раз таки возможно расширять (`extends`) инлайн интерфейсы."},{"key":"Interfaces_13","elementId":"Sliyanie_interfeisov","markdown":"## Слияние интерфейсов\n\nВ случае, если в одной области видимости объявлено несколько одноимённых интерфейсов, то они будут объединены в один.\n\n`````ts\n// так видят разработчики\ninterface IAnimal {\n    name: string;\n}\n\ninterface IAnimal {\n    age: number;\n}\n\n//так видит компилятор\n/**\ninterface IAnimal {\n    name: string;\n    age: number;\n}\n*/\n\n// разработчики получают то, что видит компилятор\nlet animal: IAnimal;\nanimal.name = 'animal'; // Ok\nanimal.age = 0; // Ok\n`````\n\nПри попытке переопределить тип поля, возникнет ошибка.\n\n`````ts\ninterface IAnimal {\n    name: string;\n    age: number;\n}\n\ninterface IAnimal {\n    name: string; // Ok\n    age: string; // Error\n}\n`````\n\nЕсли в нескольких одноимённых интерфейсах будут описаны одноимённые методы с разными сигнатурами, то они будут расценены, как описание перегрузки. К тому же, интерфейсы, которые описывают множество одноимённых методов, сохраняют свой внутренний порядок.\n\n`````ts\ninterface IBird {}\ninterface IFish {}\ninterface IInsect {}\ninterface IReptile {}\n\n// до компиляции\ninterface IAnimalFactory { \n    getAnimalByID(id: number): IBird;\n}\n\ninterface IAnimalFactory {\n    getAnimalByID(id: string): IFish;\n}\n\ninterface IAnimalFactory {\n    getAnimalByID(id: boolean): IInsect;\n    getAnimalByID(id: object): IReptile;\n}\n\n/** при компиляции\ninterface IAnimalFactory { \n    getAnimalByID(id: string): IInsect;\n    getAnimalByID(id: string): IReptile;\n    getAnimalByID(id: string): IFish;\n    getAnimalByID(id: string): IBird;\n}\n*/\nlet animal: IAnimalFactory;\nlet v1 = animal.getAnimalByID(0); // Ok -> v1: IBird\nlet v2 = animal.getAnimalByID('5'); // Ok -> v2: IFish\nlet v3 = animal.getAnimalByID(true); // Ok -> v3: IInsect\nlet v4 = animal.getAnimalByID({}); // Ok -> v4: IReptile\n`````\n\nИсключением из этого правила являются сигнатуры, которые имеют в своем описании литеральные строковые типы данных (`literal String Types`). Дело в том, что сигнатуры содержащие в своем описании литеральные строковые типы, всегда размещаются перед сигнатурами, у которых нет в описании литеральных строковых типов.\n\n`````ts\ninterface IBird {}\ninterface IFish {}\ninterface IInsect {}\ninterface IReptile {}\n\n// до компиляции\ninterface IAnimalFactory { \n    getAnimalByID(id: string): IBird;\n}\n\ninterface IAnimalFactory {\n    getAnimalByID(id: 'fish'): IFish;\n}\n\ninterface IAnimalFactory {\n    getAnimalByID(id: 'insect'): IInsect;\n    getAnimalByID(id: number): IReptile;\n}\n\n/** при компиляции\ninterface IAnimalFactory {\n    getAnimalByID(id: 'fish'): IFish;\n    getAnimalByID(id: 'insect'): IInsect;\n    getAnimalByID(id: number): IReptile;\n    getAnimalByID(id: string): IBird;\n}\n*/\n`````"}],"githubFileInfo":{"lastUpdate":1616400513000,"contributorAll":[{"name":"Bohdan Petrov","avatar":"https://avatars.githubusercontent.com/u/35348648?v=4","bio":"Front-end developer","githubUrl":"https://github.com/mindyourlifeguide"},{"name":"Kartashov Alexey","avatar":"https://avatars.githubusercontent.com/u/2387592?v=4","bio":"","githubUrl":"https://github.com/antixrist"},{"name":"nauchikus","avatar":"https://avatars.githubusercontent.com/u/31518738?v=4","bio":"@TechnoFanatic(\"🍬\")\r\n","githubUrl":"https://github.com/nauchikus"}]},"pageNav":{"isPrevPage":true,"isNextPage":true,"prevPage":{"title":"Function, Functional Types","path":"Function,Functional_Types"},"nextPage":{"title":"Объектные типы с индексными членами (объектный тип с динамическими ключами)","path":"Obektnye_tipy_s_indeksnymi_chlenami_(obektnyi_tip_s_dinamicheskimi_kluchami)"}},"contentNavData":{"key":"Interfaces","level":0,"index":21,"contentIndex":0,"section":"Типы","title":"Interfaces","path":"Interfaces","elementId":"Interfaces","children":[{"key":"Interfaces_0","index":0,"contentIndex":1,"level":1,"section":"Типы","title":"Общая теория","path":"Obshchaya_teoriya","elementId":"Obshchaya_teoriya"},{"key":"Interfaces_1","index":1,"contentIndex":2,"level":1,"section":"Типы","title":"Интерфейс в TypeScript","path":"Interfeis_v_TypeScript","elementId":"Interfeis_v_TypeScript"},{"key":"Interfaces_2","index":2,"contentIndex":3,"level":1,"section":"Типы","title":"Объявление (declaration)","path":"Obyavlenie_(declaration)","elementId":"Obyavlenie_(declaration)"},{"key":"Interfaces_3","index":3,"contentIndex":4,"level":1,"section":"Типы","title":"Конвенции именования интерфейсов","path":"Konvencii_imenovaniya_interfeisov","elementId":"Konvencii_imenovaniya_interfeisov"},{"key":"Interfaces_4","index":4,"contentIndex":5,"level":1,"section":"Типы","title":"Реализация интерфейса (implements)","path":"Realizaciya_interfeisa_(implements)","elementId":"Realizaciya_interfeisa_(implements)"},{"key":"Interfaces_5","index":5,"contentIndex":6,"level":1,"section":"Типы","title":"Декларация свойств get и set (accessors)","path":"Deklaraciya_svoistv_get_i_set_(accessors)","elementId":"Deklaraciya_svoistv_get_i_set_(accessors)"},{"key":"Interfaces_6","index":6,"contentIndex":7,"level":1,"section":"Типы","title":"Указание интерфейса в качестве типа (interface types)","path":"Ukazanie_interfeisa_v_kachestve_tipa_(interface_types)","elementId":"Ukazanie_interfeisa_v_kachestve_tipa_(interface_types)"},{"key":"Interfaces_7","index":7,"contentIndex":8,"level":1,"section":"Типы","title":"Расширение интерфейсов (extends interface)","path":"Rasshirenie_interfeisov_(extends_interface)","elementId":"Rasshirenie_interfeisov_(extends_interface)"},{"key":"Interfaces_8","index":8,"contentIndex":9,"level":1,"section":"Типы","title":"Расширение интерфейсом класса (extends class)","path":"Rasshirenie_interfeisom_klassa_(extends_class)","elementId":"Rasshirenie_interfeisom_klassa_(extends_class)"},{"key":"Interfaces_9","index":9,"contentIndex":10,"level":1,"section":"Типы","title":"Описание класса (функции-конструктора)","path":"Opisanie_klassa_(funkcii-konstruktora)","elementId":"Opisanie_klassa_(funkcii-konstruktora)"},{"key":"Interfaces_10","index":10,"contentIndex":11,"level":1,"section":"Типы","title":"Описание функционального выражения","path":"Opisanie_funkcionalnogo_vyrajeniya","elementId":"Opisanie_funkcionalnogo_vyrajeniya"},{"key":"Interfaces_11","index":11,"contentIndex":12,"level":1,"section":"Типы","title":"Описание индексных членов в объектных типов","path":"Opisanie_indeksnyh_chlenov_v_obektnyh_tipov","elementId":"Opisanie_indeksnyh_chlenov_v_obektnyh_tipov"},{"key":"Interfaces_12","index":12,"contentIndex":13,"level":1,"section":"Типы","title":"Инлайн интерфейсы (Inline Interface)","path":"Inlain_interfeisy_(Inline_Interface)","elementId":"Inlain_interfeisy_(Inline_Interface)"},{"key":"Interfaces_13","index":13,"contentIndex":14,"level":1,"section":"Типы","title":"Слияние интерфейсов","path":"Sliyanie_interfeisov","elementId":"Sliyanie_interfeisov"}]},"pageDescription":"Interfaces"},"__N_SSG":true}