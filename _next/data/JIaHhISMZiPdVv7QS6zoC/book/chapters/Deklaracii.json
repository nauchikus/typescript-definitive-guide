{"pageProps":{"urlResolver":{"image":"https://raw.githubusercontent.com/nauchikus/typescript-definitive-guide/master/book/ru/chapters/060.(Сборка) Декларации/images/"},"sectionInfoAll":[{"key":"Декларации","elementId":"Deklaracii","markdown":"# Декларации\n\nДекларации это очень важная часть _TypeScript_ благодаря которой магия статической типизации проецируется на динамический _JavaScript_. Поэтому декларациям будет посвящена вся данная глава, рекомендуемая тем, кто только собирается писать свою первую типизированную библиотеку, которую планируется распространять с помощью _npm_ репозитория."},{"key":"Декларации_0","elementId":"Chto_takoe_deklaraciya_(Declaration)","markdown":"## Что такое декларация (Declaration)\n\nПоскольку при разработке программ на _TypeScript_ используются библиотеки написанные на _JavaScript_, компилятор _tsc_, чьей главной задачей является проверка типов, чувствует себя будто у него завязаны глаза. Несмотря на то, что с каждой новой версией вывод типов все лучше и лучше учится разбирать _JavaScript_, до идеала ещё далеко. Кроме того, разбор _JavaScript_ кода добавляет нагрузку на процессор, драгоценного время которого при разработке современных приложений, порой и так не достаточно.\n\n_TypeScript_ решил эту проблему за счет подключения к проекту заранее сгенерированных им или создаваемых вручную разработчиками деклараций. Декларации размещаются в файлах с расширением `.d.ts` и состоят только из объявлений типов полностью повторяющих программу до момента компиляции при которой она была лишена всех признаков типизации.\n\n`````ts\nФайл Animal.ts\n\n\nexport default class Animal {\n   public name: string = 'animal';\n\n   public voice(): void {}\n}\n`````\n\n`````ts\nФайл Animal.d.ts\n\n\ndeclare module \"Animal\" {\n   export default class Animal {\n       name: string;\n       voice(): void;\n   }\n}\n`````\n\nЕще не забыты дни, когда для часто используемых библиотек приходилось писать декларации вручную, при чем они часто содержали ошибки. Кроме этого, декларации не успевали обновляться под постоянно развивающиеся библиотеки. Сейчас такие проблемы кажутся уже нереальными, но несмотря на это, до сих пор приходится прибегать к использованию менеджера деклараций, который был создан в те самые далекие времена."},{"key":"Декларации_1","elementId":"Ustanovka_deklaracii_s_pomoshchu_@types","markdown":"## Установка деклараций с помощью @types\n\nЕсли декларация распространяется отдельно от библиотеки, то она скорее всего, попадет в огромный репозиторий на _github_ под названием _DefinitelyTyped_ содержащий огромное количество деклараций. Чтобы было проще ориентироваться в этом множестве, помимо сайта [\"TypeSearch\"](https://microsoft.github.io/TypeSearch/) выступающего в роли поисковика, был создан менеджер деклараций под названием _Typed_. Но о нем мы говорить не будем поскольку он применяется при работе с _TypeScript_ версии меньше чем _v2.0_, поэтому речь пойдет о его развитии в образе команды пакетного менеджера _npm_, а именно _@types_.\n\nДля того, что бы установить требующуюся декларацию, в терминале необходимо выполнить команду, часть которой состоит из директивы `@types`, после которой через косую черту `/` следует имя библиотеки.\n\n`````sh\nnpm i -D @types/name\n`````\nДля примера, воспользуемся проектом созданным в теме посвященной настройки рабочего окружения и для демонстрации работы директивы `@types` установим всем известную библиотеку _React_.\n\nПервым делом установим саму библиотеку _React_ выполнив в терминале, запущенным из-под директории проекта, следующую команду.\n\n`````sh\nnpm i -D react\n`````\n\nОткрыв директорию `/node_modules/` можно убедиться, что библиотека _React_ успешно установлена, поэтому сразу же попытаемся импортировать её в файл `index.js` расположенным в директории _src_, предварительно изменив его расширение на требуемое для работы с _React_ — `.tsx`.\n\n`````ts\n// @filename: src/index.js\n\n\nimport React, {Component} from 'react'; // Error\n`````\n\nНесмотря на установленную на предыдущем шаге библиотеку _React_, при попытке импортировать её модули возникла ошибка. Возникла она потому, что компилятору _TypeScript_ ничего не известно о библиотеке _React_, поскольку декларация описывающая типы поставляется отдельно от неё. Чтобы _tsc_ понял, что от него хотят, требуется дополнительно установить декларацию при помощи команды `@types` пакетного менеджера `npm`.\n\n`````sh\nnpm i -D @types/react\n`````\n\nОшибка, возникающая при импорте модулей _React_ исчезла, а если заглянуть в директорию `_/node_modules/`, то можно увидеть новую примечательную поддиректорию `/@types` предназначенную для хранения устанавливаемых с помощью опции `@types` декларации.\n\nНо для полноты картины и этого недостаточно. Для того, что бы добавить наш компонент в dom-дерево, необходимо установить _ReactDOM_, который уже давно развивается отдельной библиотекой.\n\n`````sh\nnpm i -D react-dom\n`````\n\nКроме того, нужно установить необходимую для работы с ним декларацию.\n\n`````sh\nnpm i -D @types/react-dom\n`````\n\nОсталось только активировать опцию `--jsx` в `_tsconfig.json` и скомпилировать проект, как это было показано ранее.\n\n`````ts\nimport React, {Component} from 'react'; // Ok\nimport * as ReactDOM from 'react-dom'; // Ok\n\n\nconst HelloReact = () => <h1>Hello react!</h1>;\n\nReactDOM.render(\n  <HelloReact />,\n  document.querySelector('#root')\n);\n`````"},{"key":"Декларации_2","elementId":"Podgotovka_k_sozdaniu_deklaracii","markdown":"## Подготовка к созданию декларации\n\nПомимо того, что декларацию можно написать руками, её также можно сгенерировать автоматически, при условии, что код написан на _TypeScript_. Для того, что бы _tsc_ при компиляции генерировал декларации, нужно активировать опцию компилятора `--declaration`.\n\nБудет не лишним напомнить, что декларацию нужно генерировать только тогда, когда библиотека полностью готова. Другими словами, активировать опцию `--declaration` нужно в конфигурационном файле _production_ сборки. Кроме того, в декларации нуждается только код, который будет собран в подключаемую библиотеку. Поэтому точкой входа в библиотеку должен быть файл, который содержит только импорты нужных модулей. Но разработка библиотеки невозможна без её запуска, а значит и точки входа в которой будет создан и инициализирован её экземпляр. Поэтому, что бы избежать чувства «что-то пошло не так», необходимо помнить, что при создании библиотеки требующей декларацию, в проекте может быть несколько точек входа. Точкой входа самого компилятора, служит конфигурационный файл который ему был установлен при запуске. Это означает, что если проект находится в директории `src`, то в декларации путь будет указан как `src/libName` вместо требуемого `lib`.\n\n`````ts\n// Ожидается\n\ndeclare module \"libName\" {\n  //...\n}\n`````\n\n`````ts\n// Есть\n\ndeclare module \"src/libName\" {\n  //...\n}\n`````\n\nЭто в свою очередь означает, что при импорте модулей придется учитывать лишнюю директорию.\n\n`````ts\n// Ожидается\n\nimport {libName} from 'libName';\n`````\n\n`````ts\n// Есть\n\nimport {libName} from 'src/libName';\n`````\n\nЭто проблему можно решить, разместив конфигурационный файл в директории исходного кода, в нашем случае это директория `src`. Кто-то не придаст этому значение, кому-то это может показаться неэстетичным. Поэтому при рассмотрении генерации деклараций с помощью _tsc_, конфигурационный файл будет лежать непосредственно в директории `src`. Но при рассмотрении генерации деклараций с помощью сторонних библиотек, будет освещен альтернативный вариант.\n\nНо и это ещё не все. Представьте, что Вы создаете библиотеку _React_, которая в коде представляется одноимённым классом расположенном в файле `React.ts`. При этом модуль, который будет представлять вашу библиотеку должен называться `react`, что в свою очередь обязывает задать имя файлу являющегося точкой входа как `react.js. Ну и, что спросите вы? Если вы ещё не знаете ответ на этот вопрос, то будете удивлены, узнав, что существуют операционные системы, как, например, _Windows_, которые расценивают пути до файлов _React.ts_ и _react.ts_ идентичными. Простыми словами если в директории присутствует файл с идентификатором _Identifier_, то ОС просто не позволит создать одноимённый файл, даже если его символы будут отличаться регистром. Именно об этом и будет сказано в ошибке, возникающей когда _TypeScript_ обнаружит одноимённые файлы в одной директории. Кроме того, если ваша операционная система позволяет создавать файлы чьи идентификаторы отличаются только регистром, помните, что разработчик работающий с вами в одной команде не сможет даже установить проект себе на машину, если его операционная система работает по другим правилам.\n\nПоэтому решений у этой проблемы, на самом деле, всего два. Задавать идентификаторы отличающиеся не только регистром. Или же размещать файлы таким образом, что бы их идентификаторы не пересекались в одной директории. Но при этом нужно помнить, что структура модулей также изменится.\n\nИ поскольку _TypeScript_ является компилируемым языком, не будет лишним напомнить правила именования директории в которую будет компилироваться результат. В случае разработки приложения, директорию содержащую скомпилированный результат принято называть _dest_ (сокращение от слова _destination_). При разработке внешней библиотеки или фреймворка, директорию для собранных файлов принято называть _dist_ (сокращение от слова _distributive_)."},{"key":"Декларации_3","elementId":"Raznovidnosti_deklaracii","markdown":"## Разновидности деклараций\n\nНа самом деле это глава должна называться «разновидности библиотек», так как именно о них и пойдет речь. Дело в том, что совсем недавно вершиной хорошего тона считалось объединение всего кода в один файл. Это же правило соблюдалось и при создании библиотек. Но сейчас все кардинально поменялось, и дело вот в чем.\n\nВ мире _JavaScript_ существует большое количество библиотек, чей размер по меркам клиентских приложений превышает разумный. При этом отказ от них будет означать, что вам самому придется тратить драгоценное время на реализацию части их функционала. Это побудило создателей сборщиков наделять свои творения механизмом называющимся _Tree Shaking_.\n\n_Tree Shaking_ — это механизм позволяющий включать в сборку исключительно используемый код. Простыми словами, данный механизм позволяет взять только используемую часть от всей библиотеки. В перспективе это должно быть спасением, но на деле оказалось не совсем так.\n\nДело в том, что на данный момент _Tree Shaking_ работает только если библиотека разбита на множество модулей. К примеру такие именитые библиотеки, как _lodash_ или _rxjs_, для каждой отдельной функции создают отдельную точку входа, что при их использовании позволят значительно сократить размер конечного кода. Обозначим подобные библиотеки, как библиотеки с множеством точек входа. Кроме того, существуют библиотеки сопоставимые с монолитом, поскольку при использовании их малой части в конечную сборку они попадают целиком. Обозначим такие библиотеки, как библиотеки с единственной точкой входа."},{"key":"Декларации_4","elementId":"Deklaracii_i_oblast_vidimosti","markdown":"## Декларации и область видимости\n\nВажным моментом при создании деклараций для библиотек является понимание того, как их трактует компилятор. Дело в том, что все доступные компилятору декларации находятся в общей для всех области видимости. Это означает, что они так же, как переменные, функции и классы способны затенять или другими словами, перекрывать друг друга. Кроме того, идентификатор файла не играет никакой роли, поскольку компилятор рассматривает только определение деклараций с помощью ключевого слова `declare`. Проще говоря, два файла имеющие отличные идентификаторы, но идентичные объявления, будут затенять друг друга.\n\n`````ts\n// Файл ./types/petAnimal.d.ts\n\n\ndeclare module \"Pig\" { // Error\n  export default class Pig {}\n}\ndeclare module \"Goat\" { // Error\n  export default class Goat {}\n}\ndeclare module \"petAnimal\" { // Ok\n  export { default as Pig } from \"Pig\";\n  export { default as Goat } from \"Goat\";\n}\n`````\n\n`````ts\n// Файл ./types/wildAnimal.d.ts\n\n\ndeclare module \"Pig\" { // Error\n  export default class Pig {}\n}\ndeclare module \"Goat\" { // Error\n  export default class Goat {}\n}\ndeclare module \"wildAnimal\" { // Ok\n  export { default as Pig } from \"Pig\";\n  export { default as Goat } from \"Goat\";\n}\n`````\n\n`````ts\n// Файл index.js\n\n\nimport Pig from ‘Pig’; // From which library should import module?\n`````\n\nПогружение в область видимости стоит начать с понимания процесса компилятора стоящего за  установлением принадлежности к декларации в случаях, когда она распространяется не через менеджер `@types`. Прежде всего компилятор ищет в файле `package.json` свойство `types` и при его отсутствии или пустом значении `“”` переходит к поиску файла `index.d.ts` в корне директории. Если свойство `types` ссылается на конкретную декларацию, то точкой входа считается она. В противном случае файл `index.d.ts`. Стоит учесть, что при разработке будет возможно только взаимодействовать с модулями подключенными к точке входа. Кроме того, ограничить область видимости можно при помощи конструкций объявленных при помощи ключевых слов `module` или `namespace`. Единственное о чем сейчас стоит упомянуть, что области определяемые обеими конструкциями нужно расценивать как обычные модули, поскольку они могут включать только одно объявление экспорта по умолчанию (`export default`).\n\nЕсли не уделить должного внимания области видимости при создании деклараций для подключаемых библиотек у разработчиков которые будут использовать подобные декларации с другими декларациями имеющими идентичное определение, могут возникнуть ошибки на этапе компиляции. Решений у этой проблемы всего два — сокрытие определений и уточнение определений. Способ к которому стоит прибегнуть зависит от вида разрабатываемой библиотеки."},{"key":"Декларации_5","elementId":"Deklaracii_dlya_bibliotek_s_odnoi_tochkoi_vhoda","markdown":"## Декларации для библиотек с одной точкой входа\n\nВ проекте созданном в теме посвященной настройке рабочего пространства, в директории `src` создайте две точки входа, одну для разработки `index.js`, а другую для _prod-версии_, имя которой должно соответствовать имени библиотеки, в нашем случае это будет `index.lib.ts`.\n\nПо умолчанию точкой входа, как _npm_ пакета, так и декларации, является файл с именем `index`. Поэтому, если в проект библиотеки имеет несколько точек входа, то важно не забыть указать имя файла с помощью свойства `types` `package.json`. Если для сборки используется _webpack_, то будет значительно проще изменить имя на `index` во время компиляции.\n\nКроме того, создайте два файла: `IAnimal.ts` и `Zoo.ts`. Также в директории `/src` создайте директорию `/animal`, в которой будут размещены два файла: `Bird.ts` и `Fish.ts`. В итоге должна получится следующая структура:\n\n`````ts\n* /\n   * src\n      * utils\n         * string-util.ts\n      * animal\n         * Bird.ts\n         * Fish.ts\n      * IAnimal.ts\n      * Zoo.ts\n      * index.js\n      * index.lib.ts\n      * tsconfig.prod.ts\n`````\n\n`````ts\n// Файл IAnimal.ts\n\n\nexport interface IAnimal {\n name: string;\n}\n`````\n\n`````ts\n// Файл utils/string-util.ts\n\n\nexport function toString( text: string ): string {\n  return `[object ${ text }]`;\n}\n`````\n\n`````ts\n// Файл animals/Bird.ts\n\n\nimport { IAnimal } from \"../IAnimal\";\nimport * as StringUtil from \"../utils/string-util\"\n\nexport default class Bird implements IAnimal {\n  constructor(readonly name: string) {};\n\n  public toString(): string {\n      return StringUtil.toString(this.constructor.name);\n  }\n}\n`````\n\n`````ts\n// Файл animals/Fish.ts\n\n\nimport { IAnimal } from \"../IAnimal\";\nimport * as StringUtil from \"../utils/string-util\"\n\nexport default class Fish implements IAnimal {\n  constructor(readonly name: string) {};\n\n  public toString(): string {\n      return StringUtil.toString(this.constructor.name);\n  }\n}\n`````\n\n`````ts\n// Файл Zoo.ts\n\n\nimport { IAnimal } from \"./IAnimal\";\n\nexport default class Zoo {\n private animalAll: IAnimal[ ] = [ ];\n\n public get length(): number {\n     return this.animalAll.length;\n }\n\n public add(animal: IAnimal): void {\n     this.animalAll.push(animal);\n }\n public getAnimalByIndex(index: number): IAnimal {\n     return this.animalAll[index];\n }\n}\n`````\n\n`````ts\n// Файл index.js\n\n\nimport Bird from \"./animals/Bird\";\nimport Fish from \"./animals/Fish\";\n\nimport Zoo from './Zoo';\n\n\nconst zoo: Zoo = new Zoo();\n\nzoo.add( new Bird('raven') );\nzoo.add( new Fish('shark') );\n\nfor( let i = 0; i < zoo.length; i++ ){\n console.log( `Animal name: ${ zoo.getAnimalByIndex(i).name }.` );\n}\n`````\n\n`````ts\n// Файл index.lib.ts\n\n\n/** imports */\n\nimport { IAnimal } from \"./IAnimal\";\nimport ZooCollection from './Zoo';\n\n/** re-exports */\n\nexport {IAnimal} from './IAnimal'; // type\n\nexport {default as Bird} from './animals/Bird'; // type\nexport {default as Fish} from './animals/Fish'; // type\n\nexport {default as Zoo} from './Zoo'; // type\n\nexport const zoo: Zoo = new Zoo(); // instance\n`````\n\nВ коде нет ничего необычного, поэтому комментариев не будет. Если кому-то содержимое файла `index.lib.ts` показалось необычным, то стоит отметить, что это обычный ре-экспорт модулей _JavaScript_, который никакого отношения к _TypeScript_ не имеет. Повторю, файл `index.lib.ts` является точкой входа создаваемой библиотеки, поэтому он должен экспортировать все то, что может потребоваться при работе с ней. Конкретно в этом случае экспортировать _utils_ наружу не предполагается, поэтому они не были реэкспортированы.\n\nТакже стоит обратить внимание на конфигурационные файлы _TypeScript_, которые взаимно добавляют точки входа друг друга в исключение. Кроме того, конфигурационный файл _dev-сборки_ исключает также конфигурационный файл _prod-сборки_.\n\n`````ts\n// Файл /src/tsconfig.prod.json\n\n\n{\n   \"compilerOptions\": {\n     \"target\": \"es6\",\n     \"module\": \"umd\",\n     \"rootDir\": \"./\",\n     \"declaration\": true\n   },\n   \"exclude\": [\n     \"/node_modules\",\n     \"./index.js\"\n   ]\n }\n`````\n\n`````ts\n//  Файл /tsconfig.json\n\n\n{\n\"compilerOptions\": {\n  \"target\": \"es6\",\n  \"module\": \"umd\",\n  \"rootDir\": \"./src\"\n},\n\"exclude\": [\n  \"/node_modules\",\n  \"./src/index.lib.ts\",\n  \"./src/tsconfig.prod.json\"\n]\n}\n`````\n\n`````ts\n// Файл package.json\n\n\n{\n\"name\": \"zoo\",\n\"version\": \"1.0.0\",\n\"description\": \"\",\n\"main\": \"index.js\",\n\"scripts\": {\n  \"build\": \"./node_modules/.bin/tsc --project ./tsconfig.json --watch\",\n  \"build:prod\": \"./node_modules/.bin/tsc --project ./src/tsconfig.prod.json\"\n},\n\"author\": \"\",\n\"license\": \"ISC\",\n\"devDependencies\": {\n  \"typescript\": \"^2.5.2\"\n}\n}\n`````\n\nОсталось только запустить _prod-сборку_ и если все было сделано правильно, в директории _dist_ появятся скомпилированные файлы с расширением `.js` (конечный код) и `.d.ts` (представляющие декларации необходимые для работы как самого компилятора _TypeScript_, так и автодополнения _ide_).\n\n`````ts\n// Файл IAnimal.d.ts\n\n\nexport interface IAnimal {\n  name: string;\n}\n`````\n\n`````ts\n// Файл utils/string-util.d.ts\n\n\nexport declare function toString(text: string): string;\n`````\n\n`````ts\n// Файл animals/Bird.d.ts\n\n\nimport { IAnimal } from \"../IAnimal\";\nexport default class Bird implements IAnimal {\n  readonly name: string;\n  constructor(name: string);\n  toString(): string;\n}\n`````\n\n`````ts\n// Файл animals/Fish.d.ts\n\n\nimport { IAnimal } from \"../IAnimal\";\nexport default class Fish implements IAnimal {\n  readonly name: string;\n  constructor(name: string);\n  toString(): string;\n}\n`````\n\n`````ts\n// Файл Zoo.d.ts\n\n\nimport { IAnimal } from \"./IAnimal\";\nexport default class Zoo {\n  private animalAll;\n  readonly length: number;\n  add(animal: IAnimal): void;\n  getAnimalByIndex(index: number): IAnimal;\n}\n`````\n\n`````ts\n// Файл index.d.ts\n\n\nimport Zoo from './Zoo';\n/** re-exports */\nexport { IAnimal } from './IAnimal';\nexport { default as Bird } from './animals/Bird';\nexport { default as Fish } from './animals/Fish';\nexport { default as Zoo } from './Zoo';\n/** exports */\nexport declare const zoo: Zoo;\n`````\n\nТакже стоит сказать, что сгенерированная декларация не может рассматриваться как единоверная. Очень часто можно увидеть декларации собранные в одном файле и сгруппированные по логическим признакам с помощью `namespace` или так называемых `ghost module`.\n\n`````ts\n/**ghost module */\n\ndeclare module Zoo {\n  interface IAnimal {\n      name: string;\n  }\n\n  class Bird implements IAnimal {\n      readonly name: string;\n      constructor(name: string);\n      toString(): string;\n  }\n  class Fish implements IAnimal {\n      readonly name: string;\n      constructor(name: string);\n      toString(): string;\n  }\n\n  class Zoo {\n      private animalAll;\n      readonly length: number;\n      add(animal: IAnimal): void;\n      getAnimalByIndex(index: number): IAnimal;\n  }\n\n  const zoo: Zoo;\n}\n`````\n\n`````ts\n/** module */\n\ndeclare module \"zoo\" {\n  export = Zoo;\n}\n`````\n\nСудить, какой из этих вариантов лучше, я не возьмусь, так как на мой взгляд, в данный момент, они оба не являются исчерпывающими. Возможно в будущем появятся новые правила для создания деклараций или редакторы будут по другому обрабатывать эти.\n\nТакже стоит обратить внимание, что в случае компиляции при помощи _tsc_, если в конечной директории присутствуют файлы, чьи имена совпадают с именами генерируемых при компиляции файлов, несмотря на их замену, ошибка все равно возникнет. Другими словами, если процесс сборки запускается не в первый раз, то нужно удалить файлы оставшиеся от предыдущей компиляции."},{"key":"Декларации_6","elementId":"Deklaracii_dlya_bibliotek_s_mnojestvom_tochek_vhoda","markdown":"## Декларации для библиотек с множеством точек входа\n\nПри разработке библиотеки имеющий множество самостоятельных частей более разумно создавать каждую часть в виде отдельной точки входа. Это позволит использующим её приложениям за счет подключения только необходимых частей минимизировать вес конечной сборки, что становится возможно благодаря механизму _Tree Shaking_.\n\nДля этого рассмотрим проект состоящий из самодостаточного модуля `bird.ts`, который делает ре-экспорт модуля `Raven.ts`, а также самодостаточного модуля `fish.ts` реэкспортирующего модуль `Shark.ts`. Кроме этого оба модуля доступны в точке входа `index.lib.ts`.\n\n`````ts\n* /\n   * src/\n      * to-string-decorate.ts\n      * to-error-decorate.ts\n      * index.lib.ts\n`````\n\nСтоит сказать, что конфигурационные файлы ничем не отличаются от рассмотренных в теме создания деклараций для библиотек с одной точкой входа, поэтому их описание будет опущено.\n\n`````ts\n// Файл to-string-decorate.ts\n\n\nexport function toStringDecorate( type: string ): string {\n  return `[object ${ type }]`;\n}\n`````\n\n`````ts\n//Файл to-error-decorate.ts\n\n\nexport function toErrorDecorate( message: string, id: number = 0 ): string {\n  return `error:${ id === 0 ? '' : id }, ${ message }.`;\n}\n`````\n\n`````ts\n// Файл index.lib.ts\n\n\n/** re-export */\n\nexport {toStringDecorate} from './to-string-decorate';\nexport {toErrorDecorate} from './to-error-decorate';\n`````\n\nПосле компиляции проекта в директорию _dist_ сгенерируются следующие файлы -\n\n`````ts\n// Файл to-string-decorate.d.ts\n\n\nexport declare function toStringDecorate(type: string): string;\n`````\n\n`````ts\n// Файл to-error-decorate.d.ts\n\n\nexport declare function toErrorDecorate(message: string, id?: number): string;\n`````\n\n`````ts\n// Файл index.d.ts\n\n\n/** re-export */\n\nexport {toStringDecorate} from './to-string-decorate';\nexport {toErrorDecorate} from './to-error-decorate';\n`````\n\nСразу следует сказать, что с подобным описанием декларация не будет правильно функционировать, поэтому её придется подправить руками до следующего вида.\n\n`````ts\n// Файл to-string-decorate.d.ts\n\n\nexport declare function toStringDecorate(type: string): string;\n\nexport as namespace stringDecorate;\n`````\n\n`````ts\n// Файл to-error-decorate.d.ts\n\n\nexport declare function toErrorDecorate(message: string, id?: number): string;\n\nexport as namespace errorDecorate;\n`````\n\n`````ts\n// Файл index.d.ts\n\n\n/// <reference path=\"./to-string-decorate.d.ts\" />\n/// <reference path=\"./to-error-decorate.d.ts\" />\n\ndeclare module \"zoo\" {\n  export default {stringDecorate, errorDecorate};\n}\n`````\n\nОбычно, как отдельную часть принято экспортировать только самодостаточные модули, такие как функции или классы. Но кроме того могут потребоваться объекты содержащие константы или, что-то незначительное, без чего отдельный модуль не сможет функционировать. Если такие объекты используются всеми самостоятельными модулями, то их можно также вынести в отдельный самостоятельный модуль. В случае, когда самодостаточному модулю для полноценной работы требуются зависимости, которые больше никем не используются, то такой модуль нужно оформлять так же, как обычную точку входа. Другими словами он должен содержать ре-экспорт всего необходимого. А кроме того экспортировать все как глобальный `namespace` с помощью синтаксиса:\n\n`````ts\nexport as namespace identifier\n`````\n\nДанный синтаксис объединяет все объявленные экспорты в глобальное пространство имен с указанным идентификатором. Затем объявленные пространства имен нужно импортировать в точку входа с помощью директивы с тройным слешем `/// <reference path=””/>`, после чего экспортировать из объявленного модуля."},{"key":"Декларации_7","elementId":"Sozdanie_deklaracii_vruchnuu","markdown":"## Создание деклараций вручную\n\nОписывать незначительные декларации самостоятельно (вручную) приходится довольно часто. Потребность возникает при необходимости задекларировать импортируемые файлами `.ts` нестандартные для него расширения файлов. Дело в том, что компилятор _TypeScript_ понимает только импорт расширения `.ts`/`.tsx`/`.d.ts`/`.json`, а с активной опцией `--allowJS`, еще и `.js`/`.jsx`. Но работая с таким сборщиком как в _webpack_ или используя _css-in-js_, придется импортировать в код файлы с таким расширением, как `.html`, `.css`, и т.д. В таких случаях приходится создавать декларации файлов вручную.\n\nСамостоятельно объявление деклараций начинается с создания директории предназначенной для их хранения. В нашем случае это будет директория _types_ расположенная в корне проекта. Декларации можно складывать прямо в неё, но будет правильно считается создавать под каждую декларацию отдельную поддиректорию носящую имя модуля нуждающегося в ней. Поэтому создадим поддиректорию с именем `/css`, а уже в ней создадим файл `index.d.ts`. Откроем этот файл и напишем в нем декларацию определяющую расширение `.css`.\n\n`````ts\n// Файл ./types/css/index.d.ts\n\n\ndeclare module \"*.css\" {\n  const content: any;\n  export default content;\n}\n`````\n\nВ тех случаях, когда модуль определяет тип `any`, более уместно использовать при объявлении сокращенный вариант, который предполагает тип `any`.\n\n`````ts\ndeclare module \"*.css\";\n`````\n\nОсталось только подключить декларацию в конфигурационном файле и ошибок при импорте расширения `.css` не возникнет.\n\n`````ts\n// Файл tsconfig.json\n\n\n{\n  \"compilerOptions\": {\n      \"target\": \"es2015\",\n      \"module\": \"none\",\n      \"rootDir\": \"./src\",\n      \"typeRoots\": [\n          \"./types\"\n      ]\n  },\n  \"exclude\": [\n      \"./node_modules\"\n  ]\n}\n`````\n\nБудет не лишним упомянуть, что самостоятельное создание деклараций, помимо нестандартных расширений, также часто требуется при необходимости расширения типов описывающих внешние библиотеки. Например, если при работе с библиотекой _React_ возникнет необходимость в использовании пользовательских свойств определенных спецификацией _html_, то придется расширять объявляемый в её модуле тип `HTMLAttributes`."},{"key":"Декларации_8","elementId":"Direktiva_s_troinym_sleshem_(triple-slash_directives)","markdown":"## Директива с тройным слешем (triple-slash directives)\n\nДо этого момента было рассмотрено создание библиотек представленных одним или больше количеством самостоятельных модулей. Акцент в этом предложении необходимо сделать на слове _самостоятельных_, поскольку они не были зависимы от каких-либо других модулей (деклараций). Если разрабатываемая библиотека представляет из себя множество зависящих друг от друга модулей или она зависит от деклараций устанавливаемых с помощью директивы `@types`, то генерируемые декларации также будут нуждаться в зависимостях. Для этих случаев существует директива `/// <reference types=””/>`. Данная директива указывается в начале файла и предназначена для подключения деклараций, путь до которых указывается с помощью атрибута `types`.\n\n`````ts\n/// <reference types=\"react\" />\n`````\n\nКроме того, с помощью данной директивы можно указать версию используемой библиотеки.\n\n`````ts\n/// <reference lib=\"es2015\" />\n`````\n\nПодобный функционал будет полезен разработчикам деклараций `.d.ts`, которые зависят от конкретной версии _ECMAScript_."},{"key":"Декларации_9","elementId":"Importirovanie_deklaracii_(import)","markdown":"## Импортирование декларации (import)\n\nПомимо типов, описанных в глобальных декларациях, в аннотациях типов также можно использовать типы из деклараций импортированных с помощью директивы `import`.\n\n`````ts\n// file declaration-excluded-from-global-scope/animal.d.ts\n\nexport declare interface IAnimal {\n  type: string;\n}\n`````\n\n`````ts\n// file src/index.js\n\nimport * as DTS from \"declaration-excluded-from-global-scope/animal\";\n\n// импорт декларации на уровне модуля\n\nlet v0: DTS.IAnimal = { type: '' }; // Ok\nlet v1: DTS.IAnimal = { type: 5 }; // Error\n\n\n// инлайн импорт\n\nlet v2: import('declaration-excluded-from-global-scope/animal').IAnimal = { type: '' }; // Ok\nlet v3: import('declaration-excluded-from-global-scope/animal').IAnimal = { type: 5 }; // Error\n`````\n\nЭтот механизм также позволяет указывать аннотацию типов непосредственно в файлах с расширением `.js`.\n\n`````ts\n// file declaration-excluded-from-global-scope/animal.d.ts\n\nexport declare interface IAnimal {\n  type: string;\n}\n`````\n\n`````ts\n// file lib/index.js\n\n/**\n*\n* @param {import(\"./declaration-excluded-from-global-scope/animal\").IAnimal} animal\n*/\nexport function printAnimalInfo(animal){ animal.type; // autocomplete }\n`````\n\n`````ts\n// file src/index.js\n\nimport * as AnimalUtils from \"lib/index.js\";\n\n\nAnimalUtils.printAnimalInfo( { type: '' } ); // Ok\nAnimalUtils.printAnimalInfo( { type: 5 } ); // Error\n`````"}],"githubFileInfo":{"lastUpdate":1633879471000,"contributorAll":[{"name":"nauchikus","avatar":"https://avatars.githubusercontent.com/u/31518738?v=4","bio":"@TechnoFanatic(\"🍬\")\r\n","githubUrl":"https://github.com/nauchikus"}]},"pageNav":{"isPrevPage":true,"isNextPage":true,"prevPage":{"title":"Сборка с использованием ссылок на проекты","path":"Sborka_s_ispolzovaniem_ssylok_na_proekty"},"nextPage":{"title":"Публикация TypeScript","path":"Publikaciya_TypeScript"}},"contentNavData":{"key":"Декларации","level":0,"index":60,"contentIndex":0,"section":"Сборка","title":"Декларации","path":"Deklaracii","elementId":"Deklaracii","children":[{"key":"Декларации_0","index":0,"contentIndex":1,"level":1,"section":"Сборка","title":"Что такое декларация (Declaration)","path":"Chto_takoe_deklaraciya_(Declaration)","elementId":"Chto_takoe_deklaraciya_(Declaration)"},{"key":"Декларации_1","index":1,"contentIndex":2,"level":1,"section":"Сборка","title":"Установка деклараций с помощью @types","path":"Ustanovka_deklaracii_s_pomoshchu_@types","elementId":"Ustanovka_deklaracii_s_pomoshchu_@types"},{"key":"Декларации_2","index":2,"contentIndex":3,"level":1,"section":"Сборка","title":"Подготовка к созданию декларации","path":"Podgotovka_k_sozdaniu_deklaracii","elementId":"Podgotovka_k_sozdaniu_deklaracii"},{"key":"Декларации_3","index":3,"contentIndex":4,"level":1,"section":"Сборка","title":"Разновидности деклараций","path":"Raznovidnosti_deklaracii","elementId":"Raznovidnosti_deklaracii"},{"key":"Декларации_4","index":4,"contentIndex":5,"level":1,"section":"Сборка","title":"Декларации и область видимости","path":"Deklaracii_i_oblast_vidimosti","elementId":"Deklaracii_i_oblast_vidimosti"},{"key":"Декларации_5","index":5,"contentIndex":6,"level":1,"section":"Сборка","title":"Декларации для библиотек с одной точкой входа","path":"Deklaracii_dlya_bibliotek_s_odnoi_tochkoi_vhoda","elementId":"Deklaracii_dlya_bibliotek_s_odnoi_tochkoi_vhoda"},{"key":"Декларации_6","index":6,"contentIndex":7,"level":1,"section":"Сборка","title":"Декларации для библиотек с множеством точек входа","path":"Deklaracii_dlya_bibliotek_s_mnojestvom_tochek_vhoda","elementId":"Deklaracii_dlya_bibliotek_s_mnojestvom_tochek_vhoda"},{"key":"Декларации_7","index":7,"contentIndex":8,"level":1,"section":"Сборка","title":"Создание деклараций вручную","path":"Sozdanie_deklaracii_vruchnuu","elementId":"Sozdanie_deklaracii_vruchnuu"},{"key":"Декларации_8","index":8,"contentIndex":9,"level":1,"section":"Сборка","title":"Директива с тройным слешем (triple-slash directives)","path":"Direktiva_s_troinym_sleshem_(triple-slash_directives)","elementId":"Direktiva_s_troinym_sleshem_(triple-slash_directives)"},{"key":"Декларации_9","index":9,"contentIndex":10,"level":1,"section":"Сборка","title":"Импортирование декларации (import)","path":"Importirovanie_deklaracii_(import)","elementId":"Importirovanie_deklaracii_(import)"}]},"pageDescription":"Декларации"},"__N_SSG":true}