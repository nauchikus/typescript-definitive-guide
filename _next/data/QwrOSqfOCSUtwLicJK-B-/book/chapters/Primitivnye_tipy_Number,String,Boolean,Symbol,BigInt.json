{"pageProps":{"urlResolver":{"image":"https://raw.githubusercontent.com/nauchikus/typescript-definitive-guide/master/book/ru/chapters/013.(Типы) Примитивные типы Number, String, Boolean, Symbol, BigInt/images/"},"sectionInfoAll":[{"key":"Примитивные типы Number, String, Boolean, Symbol, BigInt","elementId":"Primitivnye_tipy_Number,String,Boolean,Symbol,BigInt","markdown":"# Примитивные типы Number, String, Boolean, Symbol, BigInt\n\nПреобразования _TypeScript_ не затронуло ни один из перечисленных в заголовке тип. Но несмотря на это их упоминание необходимо, поскольку их отсутствие сделало бы картину менее точной."},{"key":"Примитивные типы Number, String, Boolean, Symbol, BigInt_0","elementId":"Vajno","markdown":"## Важно\n\nПомимо того, что система типов _TypeScript_ включает в себя все существующие в _JavaScript_ типы данных, некоторые из них подверглись более очевидному уточнению.\n\nТипы данных, чьи идентификаторы начинаются с прописной буквы (`Type`), представляют _объектные типы_ (ссылочные типы) описывающие одноимённые типы из _JavaScript_ (`Number`, `String`, `Boolean` и т.д.). Проще говоря типы знакомые по _JavaScript_ и начинающиеся с большой буквы представляют конструкторы. В _TypeScript_ подобные типы описаны с помощью глобальных интерфейсов (`interface`) и помимо того, что их можно расширять (`extends`) и реализовывать (`implements`) их также можно указывать в аннотации типа. Но сразу стоит сделать акцент на том, что указывать их в аннотации следует только тогда, когда подразумевается именно конструктор. Для остальных случаев существуют типы идентификаторы которых начинаются со строчной буквы (`type`). Имена типов начинающихся с маленькой буквы являются зарезервированными ключевыми словами и представляют литералы примитивных значений, то есть непосредственно числа, строки и другие значения. Данные типы предназначены для указания в аннотациях, а не для использования в механизмах, как например наследование или расширение."},{"key":"Примитивные типы Number, String, Boolean, Symbol, BigInt_1","elementId":"Number_(number)_primitivnyi_chislovoi_tip","markdown":"## Number (number) примитивный числовой тип\n\nВ _TypeScript_, как и в _JavaScript_, все производные от `number` являются 64-битными числами двойной точности с плавающей запятой. \n\nПомимо того, что в _TypeScript_ существует тип `Number` представляющий конструктор одноименного типа из _JavaScript_, также существует тип `number` представляющий примитивные значения числовых литералов.\n\n`````ts\nlet v1: number; // v1: number явно\nlet v2 = 5.6; // v2: number неявно\n`````\n\nНапомню, что числа могут записываться в двоичной, восьмеричной, десятичной, шестнадцатеричной системе счисления.\n\n`````ts\nlet binary: number = 0b101;\nlet octal: number = 0o5;\nlet decimal: number = 5;\nlet hex: number = 0x5;\n`````\n\nПомимо этого тип `number` неявно преобразуется в тип `Number`, но не наоборот.\n\n```ts\nlet n: number = 5;\nlet N: Number = new Number(5);\n\nN = n; // Ok\nn = N; // Error -> Type 'Number' is not assignable to type 'number'.\n```\n\nВ случаях когда тип не указан явно, а в качестве значения ожидается результат вызова конструктора, то вывод типов определяет принадлежность к типу конструктора только если конструктор был вызван при помощи оператора `new`.\n\n```ts\nlet v0 = Number(5); // let v0: number\nlet v1 = new Number(5); // let v1: Number\n```\n\nВ _TypeScript_ поведение типа `Number` идентично поведению одноимённого типа в _JavaScript_."},{"key":"Примитивные типы Number, String, Boolean, Symbol, BigInt_2","elementId":"String_(string)_primitivnyi_strokovyi_tip","markdown":"## String (string) примитивный строковый тип\n\nПримитивный тип `String` представляет собой последовательность символов в кодировке _Unicode_ _UTF-16_. Строки могут быть заключены в одинарные или двойные кавычки, а также в обратные апострофы (инициаторы так называемых шаблонных строк).\n\nПомимо того, что в _TypeScript_ существует тип `String` описывающий одноименный конструктор из _JavaScript_, также существует тип `string` представляющий примитивные значения строковых литералов.\n\n```ts\nlet v1: string; // v1: string явно\nlet v2 = 'Bird'; // v2: string неявно\nlet v3: string = \"Fish\"; // v3: string явно\nlet v4: string = `Animals: ${v2}, ${v3}.`; // v4: string явно\n```\n\nТип `string` неявно преобразуется в тип `String`, но не наоборот.\n\n```ts\nlet s: string = \"\";\nlet S: String = new String(\"\");\n\nS = s; // Ok\ns = S; // Error -> Type 'String' is not assignable to type 'string'.\n```\n\nИ кроме этого вывод типов выводит принадлежность к типу конструктора только если он был вызван с помощью оператора `new`.\n\n```ts\nlet v0 = String(\"\"); // let v0: string\nlet v1 = new String(\"\"); // let v1: String\n```\n\nВ _TypeScript_ поведение типа `String` идентично поведению одноимённого типа в _JavaScript_."},{"key":"Примитивные типы Number, String, Boolean, Symbol, BigInt_3","elementId":"Boolean_(boolean)_primitivnyi_logicheskii_tip","markdown":"## Boolean (boolean) примитивный логический тип\n\nПримитивный тип `Boolean` является логическим типом и представлен значениями \"истина\" `true` и \"ложь\" `false`. \n\nПомимо того, что в _TypeScript_ существует тип `Boolean` представляющий одноименный конструктор из _JavaScript_, также существует тип `boolean` представляющий примитивные значения логических литералов.\n\n`````ts\nlet isV1Valid: boolean; // явно\nlet isV2Valid = false; // неявно\n`````\n\nТип `boolean` неявно преобразуется в тип `Boolean`, что делает его совместимым с ним, но не наоборот.\n\n```ts\nlet b: boolean = true;\nlet B: Boolean = new Boolean(true);\n\nB = b; // Ok\nb = B; // Error -> Type 'Boolean' is not assignable to type 'boolean'.\n```\n\nИ кроме этого вывод типов выводит принадлежность к типу конструктора только если он был вызван с помощью оператора `new`.\n\n```ts\nlet v0 = Boolean(\"\"); // let v0: boolean\nlet v1 = new Boolean(\"\"); // let v1: Boolean\n```\n\nВ _TypeScript_ поведение типа `Boolean` идентично поведению одноимённого типа в _JavaScript_."},{"key":"Примитивные типы Number, String, Boolean, Symbol, BigInt_4","elementId":"Symbol_(symbol)_primitivnyi_simvolnyi_tip","markdown":"## Symbol (symbol) примитивный символьный тип\n\nПримитивный тип `Symbol` предоставляет уникальные идентификаторы, которые при желании могут использоваться в качестве индексируемых членов объекта. \n\nПомимо того, что в _TypeScript_ существует тип `Symbol` описывающий одноименный конструктор из _JavaScript_, также существует тип `symbol`, представляющий примитивные значения литералов.\n\n`````ts\nlet v1: symbol; // v1: symbol явно\nlet v2 = Symbol('animal'); // v2: symbol неявно\n`````\n\n\nТип `symbol` неявно преобразуется в тип `Symbol`, что делает его совместимым с ним, но не наоборот.\n\n```ts\nlet s: symbol = Symbol.for(\"key\");\nlet S: Symbol = Symbol.for(\"key\");\n\nS = s; // Ok\ns = S; // Error -> Type 'Symbol' is not assignable to type 'symbol'.\n```\n\nПоскольку конструктор `Symbol` нельзя вызвать с помощью оператора `new` вывод типов всегда будет определять принадлежность к типу `symbol`.\nИ кроме этого вывод типов выводит принадлежность к типу конструктора только если он был вызван с помощью оператора `new`.\n\n```ts\nlet v0 = Symbol(\"\"); // let v0: symbol\n```\n\nТип `symbol` предназначен для аннотирования символьных литералов. В _TypeScript_, поведение типа `Symbol` идентично поведению одноимённого типа в _JavaScript_."},{"key":"Примитивные типы Number, String, Boolean, Symbol, BigInt_5","elementId":"BigInt_(bigint)_primitivnyi_chislovoi_tip","markdown":"## BigInt (bigint) примитивный числовой тип\n\n`BigInt` — примитивный числовой тип позволяющий безопасно работать с числами произвольной точности, в том числе значениями выходящими за пределы установленные типом `Number`. Примитивный тип `BigInt` указывается с помощью ключевого слова `bigint`.\n\n`````ts\nlet bigInt: bigint = BigInt(Number.MAX_VALUE) + BigInt(Number.MAX_VALUE);\n`````\n\nНо стоит заметить, что на данный момент (конец 2018 года) из-за плохой поддержки типа `BigInt` _TypeScript_ позволяет работать с ним лишь при установленной опции компилятора `--target` в значение `ESNext`.\n\nТип `bigint` предназначен для аннотирования числовых значений с произвольной точностью. В _TypeScript_ поведение типа `BigInt` идентично поведению одноимённого типа в _JavaScript_."}],"githubFileInfo":{"lastUpdate":1616400513000,"contributorAll":[{"name":"Bohdan Petrov","avatar":"https://avatars.githubusercontent.com/u/35348648?v=4","bio":"Front-end developer","githubUrl":"https://github.com/mindyourlifeguide"},{"name":"nauchikus","avatar":"https://avatars.githubusercontent.com/u/31518738?v=4","bio":"@TechnoFanatic(\"🍬\")\r\n","githubUrl":"https://github.com/nauchikus"}]},"pageNav":{"isPrevPage":true,"isNextPage":true,"prevPage":{"title":"Базовый Тип Any","path":"Bazovyi_Tip_Any"},"nextPage":{"title":"Примитивные типы Null, Undefined, Void, Never, Unknown","path":"Primitivnye_tipy_Null,Undefined,Void,Never,Unknown"}},"contentNavData":{"key":"Примитивные типы Number, String, Boolean, Symbol, BigInt","level":0,"index":13,"contentIndex":0,"section":"Типы","title":"Примитивные типы Number, String, Boolean, Symbol, BigInt","path":"Primitivnye_tipy_Number,String,Boolean,Symbol,BigInt","elementId":"Primitivnye_tipy_Number,String,Boolean,Symbol,BigInt","children":[{"key":"Примитивные типы Number, String, Boolean, Symbol, BigInt_0","index":0,"contentIndex":1,"level":1,"section":"Типы","title":"Важно","path":"Vajno","elementId":"Vajno"},{"key":"Примитивные типы Number, String, Boolean, Symbol, BigInt_1","index":1,"contentIndex":2,"level":1,"section":"Типы","title":"Number (number) примитивный числовой тип","path":"Number_(number)_primitivnyi_chislovoi_tip","elementId":"Number_(number)_primitivnyi_chislovoi_tip"},{"key":"Примитивные типы Number, String, Boolean, Symbol, BigInt_2","index":2,"contentIndex":3,"level":1,"section":"Типы","title":"String (string) примитивный строковый тип","path":"String_(string)_primitivnyi_strokovyi_tip","elementId":"String_(string)_primitivnyi_strokovyi_tip"},{"key":"Примитивные типы Number, String, Boolean, Symbol, BigInt_3","index":3,"contentIndex":4,"level":1,"section":"Типы","title":"Boolean (boolean) примитивный логический тип","path":"Boolean_(boolean)_primitivnyi_logicheskii_tip","elementId":"Boolean_(boolean)_primitivnyi_logicheskii_tip"},{"key":"Примитивные типы Number, String, Boolean, Symbol, BigInt_4","index":4,"contentIndex":5,"level":1,"section":"Типы","title":"Symbol (symbol) примитивный символьный тип","path":"Symbol_(symbol)_primitivnyi_simvolnyi_tip","elementId":"Symbol_(symbol)_primitivnyi_simvolnyi_tip"},{"key":"Примитивные типы Number, String, Boolean, Symbol, BigInt_5","index":5,"contentIndex":6,"level":1,"section":"Типы","title":"BigInt (bigint) примитивный числовой тип","path":"BigInt_(bigint)_primitivnyi_chislovoi_tip","elementId":"BigInt_(bigint)_primitivnyi_chislovoi_tip"}]},"pageDescription":"Примитивные типы Number, String, Boolean, Symbol, BigInt"},"__N_SSG":true}