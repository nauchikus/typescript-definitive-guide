{"pageProps":{"urlResolver":{"image":"https://raw.githubusercontent.com/nauchikus/typescript-definitive-guide/master/book/ru/chapters/062.(Компилятор) Опции компилятора/images/"},"sectionInfoAll":[{"key":"Опции компилятора","elementId":"Opcii_kompilyatora","markdown":"# Опции компилятора\n\nЕсли сравнить компилятор `tsc` с фортепиано, то его опции сопоставимы с камертоном позволяющим настроить его наилучшим образом, что на практике означает сократить время сборки и повысить типобезопасность проекта."},{"key":"Опции компилятора_0","elementId":"strict","markdown":"## strict\n\n`--strict` - активирует все флаги, входящие в группировку строгого режима и сопутствующие повышению типобезопасности программы. На данный момент флаг `strict` активирует следующие опции компилятора: `--strictNullChecks`, `--noImplicitAny`, `--noImplicitThis`, `--alwaysStrict`, `--strictFunctionTypes`, `--strictPropertyInitialization` и `--strictBindCallApply`. Несмотря на то, что флаг `strict` активирует сразу все указанные флаги, при желании конкретные флаги можно отключить.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"strict\": false,\n      \"strictNullChecks\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_1","elementId":"suppressExcessPropertyErrors","markdown":"## suppressExcessPropertyErrors\n\n`--suppressExcessPropertyErrors` - если данная опция активна, то компилятор перестает проверять литералы объекта на излишние члены.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"suppressExcessPropertyErrors\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n*Пример*\n\n`````ts\ninterface T1 {\n  f1: number;\n}\n\nlet v1: T1 = {f1: 0, f2: ''}; // suppressExcessPropertyErrors === false ? Error : Ok\n`````"},{"key":"Опции компилятора_2","elementId":"suppressImplicitAnyIndexErrors","markdown":"## suppressImplicitAnyIndexErrors\n\n`--suppressImplicitAnyIndexErrors` - при активной опции `--noImplicitAny` подавляет ошибки, связанные с добавлением динамических свойств в объекты, у которых отсутствует индексное определение.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"suppressImplicitAnyIndexErrors\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n*Пример для неактивной опции*\n\n`````ts\n// tsconfig.json\n\n{\n  \"compilerOptions\": {\n      \"noImplicitAny\": true,\n      \"suppressImplicitAnyIndexErrors\": false\n  }\n}\n`````\n\n`````ts\n// index.js\n\ninterface Member {\n\n}\ninterface IndexMember {\n  [key: string]: any;\n}\n\n\nlet memberObject: Member = {};\nmemberObject['name'] = 'object'; // Error\n\nlet indexMemberObject: IndexMember = {};\nindexMemberObject['name'] = 'object'; // Ok\n`````\n\n*Пример для активной опции*\n\n`````ts\n// tsconfig.json\n\n{\n  \"compilerOptions\": {\n      \"noImplicitAny\": true,\n      \"suppressImplicitAnyIndexErrors\": false\n  }\n}\n`````\n\n`````ts\n// index.js\n\ninterface Member {\n\n}\ninterface IndexMember {\n  [key: string]: any;\n}\n\n\nlet memberObject: Member = {};\nmemberObject['name'] = 'object'; // Ok\n\nlet indexMemberObject: IndexMember = {};\nindexMemberObject['name'] = 'object'; // Ok\n`````"},{"key":"Опции компилятора_3","elementId":"noImplicitAny","markdown":"## noImplicitAny\n\n`--noImplicitAny` - при активной опции выводит ошибку, если вывод типов установил принадлежность типа члена к `any`.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"noImplicitAny\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n*Пример с неактивной опцией*\n\n`````ts\nlet v1; // Ok\n\nfunction f1(p1) { // Ok\n  let v1; // Ok\n\n  return p1;\n}\n\ntype T2 = {f1}; // Ok\n\ninterface IT1 {\n  f1; // Ok\n}\n\nclass T1 {\n  public f1; // Ok\n}\n`````\n\n*Пример с активной опцией*\n\n`````ts\nlet v1; // Ok\n\nfunction f1(p1) { // Parameter 'p1' implicitly has an 'any' type.\n  let v1; // Ok\n\n  return p1;\n}\n\ntype T2 = {f1}; // Member 'f1' implicitly has an 'any' type\n\ninterface IT1 {\n  f1; // Member 'f1' implicitly has an 'any' type\n}\n\nclass T1 {\n  public f1; // Member 'f1' implicitly has an 'any' type\n}\n`````"},{"key":"Опции компилятора_4","elementId":"checkJs","markdown":"## checkJs\n\n`--checkJs` - данная опция говорит компилятору, что код, который находится в файлах с расширением `.js`, также нужно проверять на ошибки. При этом можно исключить определенные файлы из проверки, добавив им строку `// @ts-nocheck`. Или наоборот, можно попросить компилятор проверить только помеченные как `// @ts-check` файлы без активации опции `--checkJs`. К тому же можно игнорировать ошибки на конкретных строках, указав `// @ts-ignore: error message` предыдущей строке.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"checkJs\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\nКроме этого, при активной опции `--checkJS` компилятору с помощью аннотации `/** @type {...} */` можно указывать типы прямо в файлах с расширением `.js`.\n\nПри использовании _JavaScript_ в _TypeScript_ коде нарушается типобезопасность программы.\n\n`````ts\n// file sum.js\n\nexport function sum(a,b){\n  return a + b;\n}\n`````\n\n`````ts\n// file index.js\n\nimport {sum} from \"./sum.js\";\n\nlet n = sum('5', 5); // len n: any, кроме того результаты выполнения функции будет неверным\n`````\n\nНо это можно исправить с помощью специальной аннотации, которая располагается в _JavaScript_ коде.\n\n`````ts\n// file sum.js\n\n/** @type {(a:number,b:number) => number)} */\nexport function sum( a,b){\n  return a + b;\n}\n`````\n\n`````ts\n// file index.js\n\nimport {sum} from \"./sum.js\";\n\nlet n0 = sum('5', 5); // Error\nlet n1 = sum(5, 5); // Ok, let n1: number\n`````"},{"key":"Опции компилятора_5","elementId":"JSX","markdown":"## JSX\n\n`--jsx` - данная опция указывает компилятору, какое расширение указывать `.tsx` файлам после компиляции. Все дело в том, что у _React_ существует два вида приложений, одни создаются для веб-платформы, другие для мобильных платформ. Кроме того, файлы для веб-платформы на входе должны иметь расширение `.jsx`, в, то время как для мобильной платформы — `.js`. Поэтому компилятору нужно указывать, в какой именно формат преобразовывать файлы с расширением `.tsx`.\n\nПри указании `\"react\"` в качестве значения опции `--jsx` компилятор преобразует `.tsx` в `.jsx` файлы, которые затем компилируются в `.js`. Если в качестве значения будет указано `\"preserve\"`, то компилятор преобразует `.tsx` в `.jsx`, которые сохраняют _XML-подобный_ синтаксис. Если указать значение `\"react-native\"`, то компилятор преобразует файлы `.tsx` в требующийся `.js`.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"jsx\": \"react\" | \"react-native\" | \"preserve\"\n  }\n}\n`````\n\n**type**: `string`\n**default**: `preserve`\n**values**: `react`, `react-native`, `preserve`"},{"key":"Опции компилятора_6","elementId":"jsxFactory","markdown":"## jsxFactory\n\n`--jsxFactory` - данная опция позволяет при трансляции файлов `.tsx` в `.js` переопределить фабрику рендера.\n\n`````ts\n// default\n\n// from file .tsx\n\nimport * as React from \"react\";\n\n<h1>Ok</h1>\n`````\n\n`````ts\n// to file .js\n\n\"use strict\";\nexports.__esModule = true;\nvar React = require(\"react\");\nReact.createElement(\"h1\", null, \"Ok\");\n`````\n\nУстановив желаемое значение текущей опции появляется возможность переопределить функцию рендера _React_ на любую другую.\n\n`````ts\n// set options jsxFactory to dom\n\n// from file .tsx\n\nimport dom from \"dom\";\n\n<h1>Ok</h1>\n`````\n\n`````ts\n// set options jsxFactory to dom\n\n// to file .js\n\n\"use strict\";\n/** @jsx renderer */\nexports.__esModule = true;\nvar dom = require(\"dom\");\ndom[\"default\"](\"h1\", null, \"Ok\");\n`````\n\nКроме того, подобного поведения можно добиться при помощи нотации `/** @jsx identifier */`, которая указывается в начале файла, а вместо _identifier_ вписывается имя функции рендера.\n\n`````ts\n// from file .tsx\n\n/** @jsx renderer */\n\nimport renderer from \"renderer\";\n\n<h1>Ok</h1>\n`````\n\n`````ts\n// to file .js\n\n\"use strict\";\n/** @jsx renderer */\nexports.__esModule = true;\nvar renderer = require(\"renderer\");\nrenderer[\"default\"](\"h1\", null, \"Ok\");\n`````\n\nПомимо этого, аннотация `/** jsx identifier */` позволяет переопределить функцию рендера, переопределенную с помощью опции `--jsxFactory`.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"jsxFactory\": \"React.createElement\"\n  }\n}\n`````\n\n**type**: `string`\n**default**: `React.createElement`\n**values**: `\"*\"`"},{"key":"Опции компилятора_7","elementId":"target_(t)","markdown":"## target (t)\n\n`--target`, или сокращенно `-t` - указывает компилятору, с какой версией спецификации должен быть совместим генерируемый _JavaScript_ код. По умолчанию установлена совместимость с `ES3`. Кроме того, можно указывать совместимость с `ES5`, `ES2015` (она же `ES6`), `ES2016`, `ES2017`, `ESNext`. Стоит добавить, что `ESNext` равноценно _latest version_.\n\n`````ts\n{\n  \"compilerOptions\": {\n        \"target\": \"es3\"\n  }\n}\n`````\n\n**type**: `string`\n**default**: `es3`\n**values**: `es3`, `es5`, `es6` / `es2015`, `es2016`, `es2017`, `esnext`"},{"key":"Опции компилятора_8","elementId":"extends","markdown":"## extends\n\n`extends` - с помощью этого свойства можно расширять конфигурацию `tsconfig.json`.\n\n`````ts\n// tsconfig.base.json\n\n{\n  \"compilerOptions\": {\n      \"target\": \"es2015\"\n  }\n}\n`````\n\n`````ts\n// tsconfig.json\n\n{\n  \"extends\": \"./tsconfig.base.json\"\n}\n`````\n\n**type**: `string`\n**default**: `\"\"`\n**values**: `*`\n\nКроме того, при использовании механизма расширения (`extends`) поиск файла конфигурации `tsconfig.json` может осуществляться по пакетам (`packages`) `NodeJS` модулей, находящихся в директории `node_modules`.\n\n`````ts\n// tsconfig.json\n\n{\n  \"extends\": \"some-npm-module\"\n}\n\n// or\n\n{\n  \"extends\": \"some-npm-module/some-tsconfig.json\"\n}\n`````\n\nАлгоритм разрешения аналогичен алгоритму поиска модулей самого `NodeJS`. Проще говоря, если путь, указанный в качестве значения атрибута `extends` не будет найден в директории `node_modules`, находящейся в текущей директории, то поиск продолжится в директории `node_modules` вверх по дереву. Но есть одна особенность, которая заключается в том, что при разрешении пути компилятор `tsc`, зайдя в директорию `node_modules`, сначала  проверяет `package.json` на наличие атрибута `tsconfig`, которому в качестве значения указывают путь до конфигурационного файла. Если атрибут `tsconfig` найден, то конфигурация, на которую он ссылается, будет установлена в качестве расширяемой. Если `package.json` не содержит атрибут `tsconfig`, то в качестве расширяемого конфигурационного файла будет выбран файл `tsconfig.json`, находящийся в корне директории. Если в корне директории файла `tsconfig.json` найдено не будет, то поиск продолжится вверх по дереву.\n\n`````ts\n/project\n    /node_modules\n        /some-module\n            package.json // with attr \"tsconfig\": \"tsconfig.custom.json\"\n            tsconfig.custom.json\n            tsconfig.json\n    tsconfig.json // \"extends\": \"some-module\"\n\n// в этом случае в качестве расширяемого конфигурационного файла будет выбран файл находящийся по пути /node_modules/some-module/tsconfig.custom.json\n`````\n`````ts\n/project\n    /node_modules\n        /some-module\n            package.json // without attr \"tsconfig\"\n            tsconfig.custom.json\n            tsconfig.json\n    tsconfig.json // \"extends\": \"some-module\"\n\n// в этом случае в качестве расширяемого конфигурационного файла будет выбран файл находящийся по пути /node_modules/some-module/tsconfig.json\n`````\n`````ts\n/project\n    /node_modules\n        /some-module\n            package.json // without attr  \"tsconfig\"\n            tsconfig.custom.json\n            tsconfig.json\n    tsconfig.json // \"extends\": \"some-module/tsconfig.custom.json\"\n\n// в этом случае в качестве расширяемого конфигурационного файла будет выбран файл находящийся по пути /node_modules/some-module/tsconfig.custom.json\n`````"},{"key":"Опции компилятора_9","elementId":"alwaysStrict","markdown":"## alwaysStrict\n\n`--alwaysStrict` - данная опция говорит компилятору, что рассматривать и генерировать код нужно с учетом строгого режима `“use strict”`.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"alwaysStrict\": false\n  }\n}\n`````\n\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_10","elementId":"strictNullChecks","markdown":"## strictNullChecks\n\n`--strictNullChecks` - активировав эту опцию, компилятор не позволяет указывать в качестве значения типы `Null` и `Undefined`, если они не были указаны в аннотации.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"strictNullChecks\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_11","elementId":"stripInternal","markdown":"## stripInternal\n\n`--stripInternal` - когда данная опция активна, компилятор не создает деклараций `.d.ts` для файлов, помеченных как `/** @internal */`\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"stripInternal\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_12","elementId":"noImplicitThis","markdown":"## noImplicitThis\n\n`--noImplicitThis` - в активном состоянии запрещает использование `this` в местах, не предусмотренных контекстом.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"noImplicitThis\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n*Пример с неактивной опцией*\n\n`````ts\nfunction f1(){\n  this.name = 'newName'; // Ok -> context T1 window\n}\nfunction f2(this: T1){\n  this.name = 'newName'; // Ok -> context T1\n}\n\nthis.name = 'newName'; // Error -> context window\n\nclass T1 {\n  public name: string;\n\n  public m1(name: string): void {\n      this.name = name; // Ok -> context T1\n  }\n}\n`````\n\n\n*Пример с активной опцией*\n\n`````ts\nfunction f1(){\n  this.name = 'newName'; // Error -> context T1 window\n}\nfunction f2(this: T1){\n  this.name = 'newName'; // Ok -> context T1\n}\n\nthis.name = 'newName'; // Error -> context window\n\nclass T1 {\n  public name: string;\n\n  public m1(name: string): void {\n      this.name = name; // Ok -> context T1\n  }\n}\n`````"},{"key":"Опции компилятора_13","elementId":"noImplicitUseStrict","markdown":"## noImplicitUseStrict\n\n`--noImplicitUseStrict` - при активной опции ошибки будут выводиться в случаях, при которых в поток компиляции попадут файлы, содержащие `‘use strict’`. Кроме того, скомпилированные файлы также не будут содержать указание `‘use strict’`.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"noImplicitUseStrict\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_14","elementId":"baseUrl","markdown":"## baseUrl\n\n`--baseUrl` - указывает базовый путь, относительно которого будет производиться поиск модулей.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"baseUrl\": \"\"\n  }\n}\n`````\n\n**type**: `string`\n**default**: `\"\"`\n**values**: `base path`\n\n`````ts\n// m1 module ./node_modules/m1\n\n// tsconfig.json  \"baseUrl\": \"./node_modules\"\n\n// index.js\n\nimport M1 from 'm1';\n`````"},{"key":"Опции компилятора_15","elementId":"paths","markdown":"## paths\n\n`--paths` - с помощью этой опции создаются псевдонимы для используемых в программе модулей.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"paths\": {\n          \"name\": [ “path/to/lib” ]\n      }\n  }\n}\n`````\n\n**type**: `object`\n**default**: `null`\n**values**: `{[key]: *}`\n\n\n*Пример*\n\n`````ts\n// tsconfig.json\n{\n  \"compilerOptions\": {\n      \"paths\": {\n          \"jquery\": [\"node_modules/jquery/dest/jquery.min.js\"]\n      }\n  }\n}\n\n// or\n\n// tsconfig.json\n{\n  \"compilerOptions\": {\n      \"baseUrl\": \"./node_modules\",\n      \"paths\": {\n          \"jquery\": [\"jquery/dest/jquery.min.js\"]\n      }\n  }\n}\n\nimport jquery from 'jquery';\n\n// or\n\n// tsconfig.json\n{\n  \"compilerOptions\": {\n      \"baseUrl\": \"./node_modules\",\n      \"paths\": {\n          \"jQ\": [\"jquery/dest/jquery.min.js\"]\n      }\n  }\n}\n\nimport jquery from 'jQ';\n`````"},{"key":"Опции компилятора_16","elementId":"rootDir","markdown":"## rootDir\n\n`--rootDir` - с помощью этой опции можно ограничить область выборки файлов для компиляции. В качестве значения выступает строка — путь до конкретной директории или файла.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"rootDir\": \"\"\n  }\n}\n`````\n\n**type**: `string`\n**default**: `\"\"`\n**values**: `path to dir with .ts files`"},{"key":"Опции компилятора_17","elementId":"rootDirs","markdown":"## rootDirs\n\n`--rootDirs` - с помощью этой опции можно ограничить область выборки файлов для компиляции. В качестве значения принимается массив с путями до директорий и файлов.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"rootDirs\": [\n\n      ]\n  }\n}\n`````\n\n\n**type**: `array[ ]`\n**default**: `null`\n**values**: `path to dir with .ts files`"},{"key":"Опции компилятора_18","elementId":"traceResolution","markdown":"## traceResolution\n\n`--traceResolution` - в случае активной текущей опции, при компиляции будет выводиться информация о собираемых модулях.\n\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"traceResolution\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_19","elementId":"lib","markdown":"## lib\n\n`--lib` - с помощью этой опции можно управлять конструкциями, которые включены в ту или иную версию _ES_.\n\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"lib\": [\n\n      ]\n  }\n}\n`````\n\n**type**: `string[ ]`\n**default**: for es5 `[dom, es5, ScriptHost]`, for es6 `[dom, es6, dom.Iterable, ScriptHost]`\n**values**: `dom`, `webworker`, `es5`, `es6` / `es2015`, `es2015.core`, `es2015.collection`, `es2015.iterable`, ,`es2015.promise` ,`es2015.proxy` ,`es2015.reflect` ,`es2015.generator` ,`es2015.symbol` ,`es2015.symbol.wellknown` ,`es2016` ,`es2016.array.include` ,`es2017` ,`es2017.object` ,`es2017.sharedmemory` ,`scripthost`"},{"key":"Опции компилятора_20","elementId":"noLib","markdown":"## noLib\n\n\n\n`--noLib` - не использует декларацию `lib.d.ts` по умолчанию.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"noLib\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_21","elementId":"noResolve","markdown":"## noResolve\n\n\n\n`--noResolve` - данная опция говорит компилятору не компилировать файлы, которые не были указаны в командной строке.\n\n`````ts\n// terminal\n\ntsc index.js T1 --noResolve\n`````\n\n`````ts\n// index.js\n\nimport T1 from './T1'; // Ok\nimport T2 from './T2'; // Error\n`````"},{"key":"Опции компилятора_22","elementId":"noStrictGenericChecks","markdown":"## noStrictGenericChecks\n\n\n`--noStrictGenericChecks` - отключает строгую проверку параметров типа для функциональных типов.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"noStrictGenericChecks\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_23","elementId":"preserveConstEnums","markdown":"## preserveConstEnums\n\n\n\n`--preserveConstEnums` - говорит компилятору не удалять из исходного кода перечисления (`enum`), объявленные как `const`.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"preserveConstEnums\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n*Пример с неактивной опцией*\n\n`````ts\n// .ts\n\nconst enum Animal {\n  Bird = 'bird',\n  Fish = 'fish'\n}\n\nlet greeting: string = `Hello ${ Animal.Bird }!`;\n`````\n\n`````ts\n// .js\n\nlet greeting = `Hello ${\"bird\" /* Bird */}!`;\n`````\n\n\n*Пример с активной опцией*\n\n`````ts\n// .ts\n\nconst enum Animal {\n  Bird = 'bird',\n  Fish = 'fish'\n}\n\nlet greeting: string = `Hello ${ Animal.Bird }!`;\n`````\n\n`````ts\n// .js\n\nvar Animal;\n(function (Animal) {\n  Animal[\"Bird\"] = \"bird\";\n  Animal[\"Fish\"] = \"fish\";\n})(Animal || (Animal = {}));\nlet greeting = `Hello ${\"bird\" /* Bird */}!`;\n`````"},{"key":"Опции компилятора_24","elementId":"removeComments","markdown":"## removeComments\n\n\n\n`--removeComments` - удаляет комментарии из сгенерированного `.js`.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"removeComments\": false\n  }\n}\n`````\n\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_25","elementId":"noUnusedLocals","markdown":"## noUnusedLocals\n\n\n`--noUnusedLocals` - активная опция заставляет компилятор выводить сообщения о неиспользуемых элементах кода. Простыми словами, если в коде что-то объявлено, но не используется, будет возникать ошибка.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"noUnusedLocals\": false\n  }\n}\n`````\n\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n*Пример*\n\n`````ts\nimport T1 from \"./T1\"; // Error\n\nlet v0: number; // Warning\nlet v1: number = 0; // Warning\n\nfunction f /** Warning */ (  ){\n  let lv0: number; // Warning\n  let lv1: string = 0; // Error\n\n  f();\n}\n\nclass C /**Error */ {\n  private f0: number; // Warning\n  private f1: number; // Warning\n  private f2: number = 0; // Warning\n\n  constructor(  ) {\n      this.f0 = 0;\n\n      let c: C = new C(); // Warning\n  }\n\n  private m0 /** Warning */ (){} // Warning\n  private m1 /** Warning */ (){  // Warning\n      this.m1();\n  }\n}\n`````"},{"key":"Опции компилятора_26","elementId":"noUnusedParameters","markdown":"## noUnusedParameters\n\n\n`--noUnusedParameters` - данная опция заставляет компилятор выводить ошибки, если в коде будут найдены функции, чьи параметры не используются (за исключением параметров идентификаторы которых начинаются с нижней черты, например, `_prop`).\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"noUnusedParameters\": false\n  }\n}\n`````\n\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n*Пример*\n\n`````ts\nfunction f ( p0: number /** Warning */,\n          p1: number /** Warning */,\n          p2: number = 0 /** Warning */ ){\n  p1 = 0;\n}\n\nclass C {\n  constructor( p0: number /** Warning */,\n      p1: number /** Warning */,\n      p2: number = 0 /** Warning */ ) {}\n\n  private m ( p0: number /** Warning */,\n      p1: number /** Warning */,\n      p2: number = 0 /** Warning */ ){\n          p1 = 0;\n      }\n}\n`````"},{"key":"Опции компилятора_27","elementId":"skipLibCheck","markdown":"## skipLibCheck\n\n\n\n`--skipLibCheck` - при активной опции, компилятор перестает проверять типы в файлах библиотеках с расширением `.d.ts`, что экономит время, но может привести к редким ошибкам, связанным с типами.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"skipLibCheck\": false\n  }\n}\n`````\n\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_28","elementId":"declarationDir","markdown":"## declarationDir\n\n\n`--declarationDir` - указывает директорию, откуда будут подключаться или в которую будут создаваться файлы декларации `.d.ts`.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"declarationDir\": \"\"\n  }\n}\n`````\n\n\n**type**: `string`\n**default**: `\"\"`\n**values**: `path to dir with .d.ts`"},{"key":"Опции компилятора_29","elementId":"types","markdown":"## types\n\n\n`--types` - декларации, которые размещены в `/node_modules/@types/` и чьи идентификаторы перечислены в массиве, будут доступны глобально. В случае указания пустого массива, глобальный доступ к декларациям будет запрещен. К декларациям, которые запрещены глобально, можно получить доступ только путем импортирования модуля описываемого декларацией.\n\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"types\": [ \"node\", \"express\", \"rxjs\" ]\n  }\n}\n`````\n\n\n**type**: `string[ ]`\n**default**: null\n**values**: `lib identifier`\n\n\n> Важно — все примеры ниже производились после установки декларации. `npm i -D @types/react`\n\n\n*Пример с отключенной опцией*\n\n`````ts\n// tsconfig.json\n\n{\n  \"compilerOptions\": {\n\n  }\n}\n`````\n\n`````ts\n// index.js\n\nclass T1 extends React.Component {} // Ok -> global\n\n\nimport {Component} from 'react';\n\nclass T2 extends Component {} // Ok -> import\n`````\n\n*Пример с пустым массивом*\n\n`````ts\n// tsconfig.json\n\n{\n  \"compilerOptions\": {\n      \"types\": [\n\n      ]\n  }\n}\n`````\n\n`````ts\n// index.js\n\nclass T1 extends React.Component {} // Error -> global\n\n\nimport {Component} from 'react';\n\nclass T2 extends Component {} // Ok -> import\n`````\n\n*Пример с установленным значением*\n\n`````ts\n// tsconfig.json\n\n{\n  \"compilerOptions\": {\n      \"types\": [ \"react\" ]\n  }\n}\n`````\n\n`````ts\n// index.js\n\nclass T1 extends React.Component {} // Ok -> global\n\n\nimport {Component} from 'react';\n\nclass T2 extends Component {} // Ok -> import\n`````"},{"key":"Опции компилятора_30","elementId":"typeRoots","markdown":"## typeRoots\n\n\n\n`--typeRoots` - ожидает массив путей до директорий с декларациями.\n\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"typeRoots\": [ \"./types\" ]\n  }\n}\n`````\n\n**type**: `string[ ]`\n**default**: `null`\n**values**: `path to .d.ts`"},{"key":"Опции компилятора_31","elementId":"allowUnusedLabels","markdown":"## allowUnusedLabels\n\n\n`--allowUnusedLabels` - в случае, если флаг `--allowUnusedLabels` не активен, при выявлении неиспользуемых `label` возникают ошибки.\n\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"allowUnusedLabels\": false\n  }\n}\n`````\n\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_32","elementId":"noImplicitReturns","markdown":"## noImplicitReturns\n\n\n`--noImplicitReturns` - функции, имеющие возвращаемый тип, отличный от типа `void`, фактически могут не возвращать значение явно. Другими словами, что бы удовлетворять условиям данной опции, в теле функции должен присутствовать лишь оператор `return`. Но при активной текущей опции, функции будут обязаны возвращать значение явно.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"noImplicitReturns\": false\n  }\n}\n`````\n\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n*Пример*\n\n`````ts\n// noImplicitReturns === false\n\nfunction f(value: number): number{\n if (value) {\n   return; // Ok\n }\n\n // Ok\n}\n`````\n\n`````ts\n// noImplicitReturns === true\n\nfunction f(value: number): number{\n if (value) {\n   return; // Error\n }\n}\n`````\n\n`````ts\n// noImplicitReturns === true\n\nfunction f(value: number): number{\n if (value) {\n   return value; // Ok\n }\n\n // Error\n}\n`````\n\n`````ts\n// noImplicitReturns === true\n\nfunction f(value: number): number{\n if (value) {\n   return value; // Ok\n }\n\n return; // Error\n}\n`````\n\n`````ts\n// noImplicitReturns === true\n\nfunction f(value: number): number{\n if (value) {\n   return value; // Ok\n }\n\n return 0; // Ok\n}\n`````"},{"key":"Опции компилятора_33","elementId":"noFallthroughCasesInSwitch","markdown":"## noFallthroughCasesInSwitch\n\n\n\n`--noFallthroughCasesInSwitch` - при активной опции в случае, если блок кода `case` имеет код, при этом не имеет выхода из него (`break` или `return`), возникнет ошибка.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"noFallthroughCasesInSwitch\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n*Пример*\n\n`````ts\nfunction isAdmin( value: string ){\n  switch (value) {\n      case 'user': // If noFallthroughCasesInSwitch === false then Ok\n          if( nodeenv.mode === 'dev' ){\n              console.log( `...` );\n          }\n      case 'moderator':\n          return false;\n      case 'admin':\n          return true;\n  }\n}\nfunction isAdmin( value: string ){\n  switch (value) {\n      case 'user': // If noFallthroughCasesInSwitch === true then Error\n          if( nodeenv.mode === 'dev' ){\n              console.log( `...` );\n          }\n      case 'moderator':\n          return false;\n      case 'admin':\n          return true;\n  }\n}\n`````"},{"key":"Опции компилятора_34","elementId":"outFile","markdown":"## outFile\n\n\n\n`--outFile` - компилятор, при условии, что в качестве модулей указанно `amd` или `system`, будет сохранять все скомпилированные модули в один файл, указанный в качестве значения опции.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"outFile\": \"\"\n  }\n}\n`````\n\n\n**type**: `string`\n**default**: `\"\"`\n**values**: `path to bundle`\n\n\n*до компиляции*\n\n`````ts\n// T1.ts\n\nexport default class T1 {}\n\n// T2.ts\n\nimport T1 from './T1';\n\nexport default class T2 extends T1 {}\n\n// index.js\n\nimport T2 from './T2';\n\nconst v1: T2 = new T2();\n`````\n\n\n*после компиляции*\n\n`````ts\ndefine(\"T1\", [\"require\", \"exports\"], function (require, exports) {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", { value: true });\n  class T1 {\n  }\n  exports.default = T1;\n});\ndefine(\"T2\", [\"require\", \"exports\", \"T1\"], function (require, exports, T1_1) {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", { value: true });\n  class T2 extends T1_1.default {\n  }\n  exports.default = T2;\n});\ndefine(\"index\", [\"require\", \"exports\", \"T2\"], function (require, exports, T2_1) {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", { value: true });\n  const v1 = new T2_1.default();\n});\n`````"},{"key":"Опции компилятора_35","elementId":"allowSyntheticDefaultImports","markdown":"## allowSyntheticDefaultImports\n\n\n`--allowSyntheticDefaultImports` - позволяет предотвращать ошибки, которые возникают во время сборки по причине несовместимости _SystemJS_ и _CommonJS_. Дело в том, что в _ES6_ синтаксисе есть возможность экспорта по умолчанию (`export default`), после компиляции которого _CommonJS_ испытывает трудности, так как не знает, что такое `default`. Чаще всего проблема возникает в случая, когда разработка ведется с применением одних модулей, а подключаемые библиотеки используют другие.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"allowSyntheticDefaultImports\": false\n  }\n}\n`````\n\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_36","elementId":"allowUnreachableCode","markdown":"## allowUnreachableCode\n\n\n`--allowUnreachableCode` - если значение данной опции выставлено в `true`, то при обнаружении неиспользуемого кода будет выводиться сообщение об ошибке.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"allowUnreachableCode\": false\n  }\n}\n`````\n\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n*Пример*\n\n`````ts\nfunction f1(value: number): void {\n  throw new Error('');\n\n  console.log(''); // Error - Unreachable code detected\n}\n\nfunction f2() {\n  return\n  {\n      value: '' // Error - Unreachable code detected\n  }\n}\n`````"},{"key":"Опции компилятора_37","elementId":"allowJs","markdown":"## allowJs\n\n\n`--allowJs` - в случае, когда код, одна часть которого написана на _TypeScript_, а другая на _JavaScript_, требуется собрать в общий файл, достаточно активировать текущую опцию.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"allowJs\": false\n  }\n}\n`````\n\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n*Пример*\n\n`````ts\n// sun.js\n\nexport default function sum(a, b){\n  return a + b;\n}\n\n// index.js\n\nimport sum from './sum';\n\nlet result: number = sum(1, 1);\n`````"},{"key":"Опции компилятора_38","elementId":"reactNamespace","markdown":"## reactNamespace\n\n\n\n`--reactNamespace` - позволяет установить фабрику рендера `.jsx` синтаксиса.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"reactNamespace\": \"\"\n  }\n}\n`````\n\n\n**type**: `string`\n**default**: `\"\"`\n**values**: `\"*\"`\n\n\n*Пример*\n\n`````ts\n// index.js\n\nimport {jsxFactory} from \"jsxFactory\";\n\nconst div = <div>Hello JSX!</div>;\n\n// after compile\n\n\"use strict\";\nvar jsxFactory_1 = require(\"jsxFactory\");\nvar div = jsxFactory_1.jsxFactory.createElement(\"div\", null, \"Hello JSX!\");\n`````"},{"key":"Опции компилятора_39","elementId":"pretty","markdown":"## pretty\n\n\n`--pretty` - раскрашивает в разные цвета выводимые в консоль сообщения, делая их более понятными.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"pretty\": true\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `true`\n**values**: `true`, `false`"},{"key":"Опции компилятора_40","elementId":"moduleResolution","markdown":"## moduleResolution\n\n\n`--moduleResolution` - позволяет конкретизировать поведение модулей.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"moduleResolution\": \"node\"\n  }\n}\n`````\n\n\n**type**: `string`\n**default**: module === `AMD` | `System` | `ES6` ? `classic` : `node`\n**values**: `classic`, `node`"},{"key":"Опции компилятора_41","elementId":"exclude","markdown":"## exclude\n\n\n`exclude` - в обычной ситуации под компиляцию рекурсивно попадают все файлы, которые включает в себя директория, содержащая `tsconfig.json`. Решением этой проблемы является свойство `exclude`, определенное в корне конфигурационного файла. В качестве его значения выступает массив с путями к файлам или директориям, которые следует исключить из компиляции.\n\n`````ts\n{\n  \"exclude\": [\n\n  ]\n}\n`````\n\n\n**type**: `string[ ]`\n**default**: `null`\n**values**: `path to file or dir`"},{"key":"Опции компилятора_42","elementId":"noEmitHelpers","markdown":"## noEmitHelpers\n\n\n`--noEmitHelpers` - после компиляции файлов с расширением `.ts` каждый скомпилированный файл `.js` (модуль) содержит, если в этом есть необходимость, вспомогательный код (проще говоря, helpers), который помогает решить проблему совместимости версий _ES_. В большей степени этот код, находящийся в разных файлах (модулях), идентичен. Простыми словами, helpers повторяются от файла к файлу. Компилятор вынужден добавлять повторяющийся код, что бы гарантировать работу каждого модуля по отдельности. Но если модули собираются в одну общую сборку, активация текущего флага укажет компилятору, что helpers нужно вынести в отдельный модуль, который будет доступен в зависящих от него частях кода. Это поможет избавиться от дублирования кода и сократит размер собранного файла.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"noEmitHelpers\": false\n  }\n}\n`````\n\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_43","elementId":"newLine","markdown":"## newLine\n\n\n`--newLine` - по умолчанию, новая строка обозначается `\\r\\n` на _Windows_ и `\\r` на _nix_ системах. Для переопределения поведения используется данная опция.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"newLine\": \"LF\"\n  }\n}\n`````\n\n**type**: `string`\n**default**: `platform specific`\n**values**: `CRLF`, `LF`"},{"key":"Опции компилятора_44","elementId":"inlineSourceMap","markdown":"## inlineSourceMap\n\n\n`--inlineSourceMap` - активная опция приводит к тому, что _source maps_ записываются _inline_ в `.js` файлы, а не выносятся в отдельные файлы `.map.js`.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"inlineSourceMap\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_45","elementId":"inlineSources","markdown":"## inlineSources\n\n\n`--inlineSources` - при активной опции, источник _source map_ включается в файл вместе c _source map_. Работает в паре с опцией `--inlineSourceMap`.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"inlineSources\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_46","elementId":"noEmitOnError","markdown":""},{"key":"Опции компилятора_47","elementId":"noEmit","markdown":"## noEmitHelpers\n\n\n`--noEmitHelpers` - после компиляции файлов с расширением `.ts` каждый скомпилированный файл `.js` (модуль) содержит, если в этом есть необходимость, вспомогательный код (проще говоря, helpers), который помогает решить проблему совместимости версий _ES_. В большей степени этот код, находящийся в разных файлах (модулях), идентичен. Простыми словами, helpers повторяются от файла к файлу. Компилятор вынужден добавлять повторяющийся код, что бы гарантировать работу каждого модуля по отдельности. Но если модули собираются в одну общую сборку, активация текущего флага укажет компилятору, что helpers нужно вынести в отдельный модуль, который будет доступен в зависящих от него частях кода. Это поможет избавиться от дублирования кода и сократит размер собранного файла.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"noEmitHelpers\": false\n  }\n}\n`````\n\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n## newLine\n\n\n`--newLine` - по умолчанию, новая строка обозначается `\\r\\n` на _Windows_ и `\\r` на _nix_ системах. Для переопределения поведения используется данная опция.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"newLine\": \"LF\"\n  }\n}\n`````\n\n**type**: `string`\n**default**: `platform specific`\n**values**: `CRLF`, `LF`\n\n\n## inlineSourceMap\n\n\n`--inlineSourceMap` - активная опция приводит к тому, что _source maps_ записываются _inline_ в `.js` файлы, а не выносятся в отдельные файлы `.map.js`.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"inlineSourceMap\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n## inlineSources\n\n\n`--inlineSources` - при активной опции, источник _source map_ включается в файл вместе c _source map_. Работает в паре с опцией `--inlineSourceMap`.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"inlineSources\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n## noEmitOnError\n\n\n`--noEmitOnError` - несмотря на ошибки в _TypeScript_ коде, компилятор все равно генерирует `.js` файлы. Для того, что бы компилятор генерировал файлы `.js` только в случае успешной компиляции, нужно активировать данную опцию.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"noEmitOnError\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n## noEmit\n\n\n`--noEmit` - при активной опции информация о компиляции перестает выводиться.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"noEmit\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_48","elementId":"charset","markdown":"## charset\n\n\n`--charset` - устанавливает формат входных файлов.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"charset\": \"\"\n  }\n}\n`````\n\n**type**: `string`\n**default**: `utf8`\n**values**: `*`"},{"key":"Опции компилятора_49","elementId":"diagnostics","markdown":"## diagnostics\n\n\n`--diagnostics` - выводит диагностическую информацию.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"diagnostics\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_50","elementId":"declaration","markdown":"## declarationDir\n\n\n`--declarationDir` - указывает директорию, откуда будут подключаться или в которую будут создаваться файлы декларации `.d.ts`.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"declarationDir\": \"\"\n  }\n}\n`````\n\n\n**type**: `string`\n**default**: `\"\"`\n**values**: `path to dir with .d.ts`\n\n\n## types\n\n\n`--types` - декларации, которые размещены в `/node_modules/@types/` и чьи идентификаторы перечислены в массиве, будут доступны глобально. В случае указания пустого массива, глобальный доступ к декларациям будет запрещен. К декларациям, которые запрещены глобально, можно получить доступ только путем импортирования модуля описываемого декларацией.\n\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"types\": [ \"node\", \"express\", \"rxjs\" ]\n  }\n}\n`````\n\n\n**type**: `string[ ]`\n**default**: null\n**values**: `lib identifier`\n\n\n> Важно — все примеры ниже производились после установки декларации. `npm i -D @types/react`\n\n\n*Пример с отключенной опцией*\n\n`````ts\n// tsconfig.json\n\n{\n  \"compilerOptions\": {\n\n  }\n}\n`````\n\n`````ts\n// index.js\n\nclass T1 extends React.Component {} // Ok -> global\n\n\nimport {Component} from 'react';\n\nclass T2 extends Component {} // Ok -> import\n`````\n\n*Пример с пустым массивом*\n\n`````ts\n// tsconfig.json\n\n{\n  \"compilerOptions\": {\n      \"types\": [\n\n      ]\n  }\n}\n`````\n\n`````ts\n// index.js\n\nclass T1 extends React.Component {} // Error -> global\n\n\nimport {Component} from 'react';\n\nclass T2 extends Component {} // Ok -> import\n`````\n\n*Пример с установленным значением*\n\n`````ts\n// tsconfig.json\n\n{\n  \"compilerOptions\": {\n      \"types\": [ \"react\" ]\n  }\n}\n`````\n\n`````ts\n// index.js\n\nclass T1 extends React.Component {} // Ok -> global\n\n\nimport {Component} from 'react';\n\nclass T2 extends Component {} // Ok -> import\n`````\n\n\n## typeRoots\n\n\n\n`--typeRoots` - ожидает массив путей до директорий с декларациями.\n\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"typeRoots\": [ \"./types\" ]\n  }\n}\n`````\n\n**type**: `string[ ]`\n**default**: `null`\n**values**: `path to .d.ts`\n\n\n## allowUnusedLabels\n\n\n`--allowUnusedLabels` - в случае, если флаг `--allowUnusedLabels` не активен, при выявлении неиспользуемых `label` возникают ошибки.\n\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"allowUnusedLabels\": false\n  }\n}\n`````\n\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n\n## noImplicitReturns\n\n\n`--noImplicitReturns` - функции, имеющие возвращаемый тип, отличный от типа `void`, фактически могут не возвращать значение явно. Другими словами, что бы удовлетворять условиям данной опции, в теле функции должен присутствовать лишь оператор `return`. Но при активной текущей опции, функции будут обязаны возвращать значение явно.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"noImplicitReturns\": false\n  }\n}\n`````\n\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n*Пример*\n\n`````ts\n// noImplicitReturns === false\n\nfunction f(value: number): number{\n if (value) {\n   return; // Ok\n }\n\n // Ok\n}\n`````\n\n`````ts\n// noImplicitReturns === true\n\nfunction f(value: number): number{\n if (value) {\n   return; // Error\n }\n}\n`````\n\n`````ts\n// noImplicitReturns === true\n\nfunction f(value: number): number{\n if (value) {\n   return value; // Ok\n }\n\n // Error\n}\n`````\n\n`````ts\n// noImplicitReturns === true\n\nfunction f(value: number): number{\n if (value) {\n   return value; // Ok\n }\n\n return; // Error\n}\n`````\n\n`````ts\n// noImplicitReturns === true\n\nfunction f(value: number): number{\n if (value) {\n   return value; // Ok\n }\n\n return 0; // Ok\n}\n`````\n\n\n## noFallthroughCasesInSwitch\n\n\n\n`--noFallthroughCasesInSwitch` - при активной опции в случае, если блок кода `case` имеет код, при этом не имеет выхода из него (`break` или `return`), возникнет ошибка.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"noFallthroughCasesInSwitch\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n*Пример*\n\n`````ts\nfunction isAdmin( value: string ){\n  switch (value) {\n      case 'user': // If noFallthroughCasesInSwitch === false then Ok\n          if( nodeenv.mode === 'dev' ){\n              console.log( `...` );\n          }\n      case 'moderator':\n          return false;\n      case 'admin':\n          return true;\n  }\n}\nfunction isAdmin( value: string ){\n  switch (value) {\n      case 'user': // If noFallthroughCasesInSwitch === true then Error\n          if( nodeenv.mode === 'dev' ){\n              console.log( `...` );\n          }\n      case 'moderator':\n          return false;\n      case 'admin':\n          return true;\n  }\n}\n`````\n\n\n## outFile\n\n\n\n`--outFile` - компилятор, при условии, что в качестве модулей указанно `amd` или `system`, будет сохранять все скомпилированные модули в один файл, указанный в качестве значения опции.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"outFile\": \"\"\n  }\n}\n`````\n\n\n**type**: `string`\n**default**: `\"\"`\n**values**: `path to bundle`\n\n\n*до компиляции*\n\n`````ts\n// T1.ts\n\nexport default class T1 {}\n\n// T2.ts\n\nimport T1 from './T1';\n\nexport default class T2 extends T1 {}\n\n// index.js\n\nimport T2 from './T2';\n\nconst v1: T2 = new T2();\n`````\n\n\n*после компиляции*\n\n`````ts\ndefine(\"T1\", [\"require\", \"exports\"], function (require, exports) {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", { value: true });\n  class T1 {\n  }\n  exports.default = T1;\n});\ndefine(\"T2\", [\"require\", \"exports\", \"T1\"], function (require, exports, T1_1) {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", { value: true });\n  class T2 extends T1_1.default {\n  }\n  exports.default = T2;\n});\ndefine(\"index\", [\"require\", \"exports\", \"T2\"], function (require, exports, T2_1) {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", { value: true });\n  const v1 = new T2_1.default();\n});\n`````\n\n\n## allowSyntheticDefaultImports\n\n\n`--allowSyntheticDefaultImports` - позволяет предотвращать ошибки, которые возникают во время сборки по причине несовместимости _SystemJS_ и _CommonJS_. Дело в том, что в _ES6_ синтаксисе есть возможность экспорта по умолчанию (`export default`), после компиляции которого _CommonJS_ испытывает трудности, так как не знает, что такое `default`. Чаще всего проблема возникает в случая, когда разработка ведется с применением одних модулей, а подключаемые библиотеки используют другие.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"allowSyntheticDefaultImports\": false\n  }\n}\n`````\n\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n## allowUnreachableCode\n\n\n`--allowUnreachableCode` - если значение данной опции выставлено в `true`, то при обнаружении неиспользуемого кода будет выводиться сообщение об ошибке.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"allowUnreachableCode\": false\n  }\n}\n`````\n\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n*Пример*\n\n`````ts\nfunction f1(value: number): void {\n  throw new Error('');\n\n  console.log(''); // Error - Unreachable code detected\n}\n\nfunction f2() {\n  return\n  {\n      value: '' // Error - Unreachable code detected\n  }\n}\n`````\n\n\n## allowJs\n\n\n`--allowJs` - в случае, когда код, одна часть которого написана на _TypeScript_, а другая на _JavaScript_, требуется собрать в общий файл, достаточно активировать текущую опцию.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"allowJs\": false\n  }\n}\n`````\n\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n*Пример*\n\n`````ts\n// sun.js\n\nexport default function sum(a, b){\n  return a + b;\n}\n\n// index.js\n\nimport sum from './sum';\n\nlet result: number = sum(1, 1);\n`````\n\n\n## reactNamespace\n\n\n\n`--reactNamespace` - позволяет установить фабрику рендера `.jsx` синтаксиса.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"reactNamespace\": \"\"\n  }\n}\n`````\n\n\n**type**: `string`\n**default**: `\"\"`\n**values**: `\"*\"`\n\n\n*Пример*\n\n`````ts\n// index.js\n\nimport {jsxFactory} from \"jsxFactory\";\n\nconst div = <div>Hello JSX!</div>;\n\n// after compile\n\n\"use strict\";\nvar jsxFactory_1 = require(\"jsxFactory\");\nvar div = jsxFactory_1.jsxFactory.createElement(\"div\", null, \"Hello JSX!\");\n`````\n\n\n## pretty\n\n\n`--pretty` - раскрашивает в разные цвета выводимые в консоль сообщения, делая их более понятными.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"pretty\": true\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `true`\n**values**: `true`, `false`\n\n\n## moduleResolution\n\n\n`--moduleResolution` - позволяет конкретизировать поведение модулей.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"moduleResolution\": \"node\"\n  }\n}\n`````\n\n\n**type**: `string`\n**default**: module === `AMD` | `System` | `ES6` ? `classic` : `node`\n**values**: `classic`, `node`\n\n\n## exclude\n\n\n`exclude` - в обычной ситуации под компиляцию рекурсивно попадают все файлы, которые включает в себя директория, содержащая `tsconfig.json`. Решением этой проблемы является свойство `exclude`, определенное в корне конфигурационного файла. В качестве его значения выступает массив с путями к файлам или директориям, которые следует исключить из компиляции.\n\n`````ts\n{\n  \"exclude\": [\n\n  ]\n}\n`````\n\n\n**type**: `string[ ]`\n**default**: `null`\n**values**: `path to file or dir`\n\n\n## noEmitHelpers\n\n\n`--noEmitHelpers` - после компиляции файлов с расширением `.ts` каждый скомпилированный файл `.js` (модуль) содержит, если в этом есть необходимость, вспомогательный код (проще говоря, helpers), который помогает решить проблему совместимости версий _ES_. В большей степени этот код, находящийся в разных файлах (модулях), идентичен. Простыми словами, helpers повторяются от файла к файлу. Компилятор вынужден добавлять повторяющийся код, что бы гарантировать работу каждого модуля по отдельности. Но если модули собираются в одну общую сборку, активация текущего флага укажет компилятору, что helpers нужно вынести в отдельный модуль, который будет доступен в зависящих от него частях кода. Это поможет избавиться от дублирования кода и сократит размер собранного файла.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"noEmitHelpers\": false\n  }\n}\n`````\n\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n## newLine\n\n\n`--newLine` - по умолчанию, новая строка обозначается `\\r\\n` на _Windows_ и `\\r` на _nix_ системах. Для переопределения поведения используется данная опция.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"newLine\": \"LF\"\n  }\n}\n`````\n\n**type**: `string`\n**default**: `platform specific`\n**values**: `CRLF`, `LF`\n\n\n## inlineSourceMap\n\n\n`--inlineSourceMap` - активная опция приводит к тому, что _source maps_ записываются _inline_ в `.js` файлы, а не выносятся в отдельные файлы `.map.js`.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"inlineSourceMap\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n## inlineSources\n\n\n`--inlineSources` - при активной опции, источник _source map_ включается в файл вместе c _source map_. Работает в паре с опцией `--inlineSourceMap`.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"inlineSources\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n## noEmitOnError\n\n\n`--noEmitOnError` - несмотря на ошибки в _TypeScript_ коде, компилятор все равно генерирует `.js` файлы. Для того, что бы компилятор генерировал файлы `.js` только в случае успешной компиляции, нужно активировать данную опцию.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"noEmitOnError\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n## noEmit\n\n\n`--noEmit` - при активной опции информация о компиляции перестает выводиться.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"noEmit\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n## charset\n\n\n`--charset` - устанавливает формат входных файлов.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"charset\": \"\"\n  }\n}\n`````\n\n**type**: `string`\n**default**: `utf8`\n**values**: `*`\n\n\n## diagnostics\n\n\n`--diagnostics` - выводит диагностическую информацию.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"diagnostics\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n## declaration\n\n\n`--declaration` - генерирует файлы декларации `.d.ts` из `.ts` файлов.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"declaration\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_51","elementId":"downlevelIteration","markdown":"## downlevelIteration\n\n\n`--downlevelIteration` - при активной опции становится возможно использовать итераторы при компиляции в версии ниже `ES6`. Помимо самих итераторов, становятся доступны и нововведения (`for...of`, `Array Destructuring`, `Spread` и т.д.), которые построены с их использованием.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"downlevelIteration\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_52","elementId":"emitBOM","markdown":"## emitBOM\n\n\n`--emitBOM` - Извлекает _маркер последовательности байтов_ _UTF-8_ (BOM) в начале выходных файлов.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"emitBOM\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_53","elementId":"emitDecoratorMetadata","markdown":"## emitDecoratorMetadata\n\n\n`--emitDecoratorMetadata` - ...\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"emitDecoratorMetadata\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_54","elementId":"forceConsistentCasingInFileNames","markdown":"## forceConsistentCasingInFileNames\n\n\n`--forceConsistentCasingInFileNames` - запрещает несогласованные ссылки на один и тот же файл.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"forceConsistentCasingInFileNames\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_55","elementId":"help_(h)","markdown":"##  help (h)\n\n\n`--help` или `-h` - выводит список доступных опций.\n\n`````ts\ntsc --help\ntsc -h\n`````"},{"key":"Опции компилятора_56","elementId":"importHelpers","markdown":"## importHelpers\n\n\n`--importHelpers` - импортирует таких помощников (helpers), как `__extends`, `__rest` и т.д.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"importHelpers\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_57","elementId":"isolatedModules","markdown":"## isolatedModules\n\n\n`--isolatedModules` - транслирует каждый файл, как отдельный модуль.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"isolatedModules\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_58","elementId":"listEmittedFiles","markdown":"## listEmittedFiles\n\n\n`--listEmittedFiles` - выводит список сгенерированных файлов.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"listEmittedFiles\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_59","elementId":"listFiles","markdown":"## listFiles\n\n\n`--listFiles` - выводит список участвующих в компиляции файлов.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"listFiles\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_60","elementId":"sourceRoot","markdown":"## sourceRoot\n\n\n`--sourceRoot` - в качестве значения принимает базовый путь до директории, в которой лежат исходники `.ts`, необходимые для ассоциации с _source map_.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"sourceRoot\": \"\"\n  }\n}\n`````\n\n**type**: `string`\n**default**: `\"\"`\n**values**: `path to source  .ts dir`"},{"key":"Опции компилятора_61","elementId":"mapRoot","markdown":"## mapRoot\n\n\n`--mapRoot` - место, откуда будут браться файлы `.map.js`.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"mapRoot\": \"\"\n  }\n}\n`````\n\n**type**: `string`\n**default**: `\"\"`\n**values**: ``"},{"key":"Опции компилятора_62","elementId":"maxNodeModuleJsDepth","markdown":"## maxNodeModuleJsDepth\n\n\n`--maxNodeModuleJsDepth` - максимальная глубина поиска зависимостей в `/node_modules` и загрузки файлов `.js`. Работает только с активной опцией `--allowJs`.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"maxNodeModuleJsDepth\": 0\n  }\n}\n`````\n\n**type**: `number`\n**default**: `0`\n**values**: `0...n`"},{"key":"Опции компилятора_63","elementId":"project_(p)","markdown":"## project (p)\n\n\n`--project` или `-p` - с помощью этого флага можно указать как путь до директории, которая содержит `tsconfig.json`, так и на конкретный `tsconfig.json` файл.\n\n`````ts\ntsc --project\ntsc -p ./configs/tsconfig.es6.json\n`````\n\n**type**: `string`\n**default**: ``\n**values**: `path to tsconfig.json`"},{"key":"Опции компилятора_64","elementId":"init","markdown":"## init\n\n\n`--init` - создает новый `tsconfig.json` со всеми доступными опциями, большинство из которых закомментировано, дабы создать оптимальную конфигурацию.\n\n`````sh\ntsc --init\n`````"},{"key":"Опции компилятора_65","elementId":"version_(v)","markdown":"## version (v)\n\n\n`--version` или `-v` - выводит информацию о текущей версии _TypeScript_.\n\n`````sh\ntsc --version\ntsc -v\n`````"},{"key":"Опции компилятора_66","elementId":"watch_(w)","markdown":"## watch (w)\n\n\n`--watch` или `-w` - запускает компилятор в режиме наблюдения за изменением файлов. При каждом изменении отслеживаемых файлов компиляция будет запущена автоматически.\n\n`````sh\ntsc --watch\ntsc -w\n`````"},{"key":"Опции компилятора_67","elementId":"preserveSymlinks","markdown":"## preserveSymlinks\n\n\n`--preserveSymlinks` - текущая опция демонстрирует поведение, идентичное реализуемому в _NodeJS_ с активным флагом `--preserve-symlinks`. При активной опции символические ссылки на модели (modules) и пакеты (packages) разрешаются относительно файла символической ссылки, а не относительно пути, к которому разрешается символическая ссылка. Кроме того, поведение при активной текущей опции противоположно поведению, предоставляемому _Webpack_ с помощью флага со схожим по смыслу названием `resolve.symlinks`.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"preserveSymlinks\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_68","elementId":"strictFunctionTypes","markdown":"## strictFunctionTypes\n\n\n`--strictFunctionTypes` - при активной опции параметры функций начинают сравниваться по контрвариантным правилам, в, то время, как при не активной опции, сравнения производятся по бивариантным правилам.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"strictFunctionTypes\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_69","elementId":"locale","markdown":"## locale\n\n\n`--locale` - позволяет указать один из заданных языков для вывода диагностических сообщений.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"locale\": \"en\" | \"cs\" | \"de\" | \"es\" | \"fr\" | \"it\" | \"ja\" | \"ko\" | \"pl\" | \"pt-BR\" | \"ru\" | \"tr\" | \"zh-CN\" | \"zh-TW\" |\n  }\n}\n`````\n\n\n\n**type**: `string`\n**default**: `platform specific`\n**values**: English (US): `en`,Czech: `cs`,German: `de`,Spanish: `es`,French: `fr`,Italian: `it`,Japanese: `ja`,Korean: `ko`,Polish: `pl`,Portuguese(Brazil): `pt-BR`,Russian: `ru`,Turkish: `tr`,Simplified Chinese: `zh-CN`,Traditional Chinese: `zh-TW`"},{"key":"Опции компилятора_70","elementId":"strictPropertyInitialization","markdown":"## strictPropertyInitialization\n\n\n`--strictPropertyInitialization` - при активной опции в случае, когда в классе присутствуют поля, не инициализированные в момент создания или в конструкторе, возникает ошибка. Более подробно данная тема раскрыта в главе [“Классы - Definite Assignment Assertion Modifier”](../028.(Классы)%20Definite%20Assignment%20Assertion%20Modifier).\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"strictPropertyInitialization\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n`````ts\nclass Identifier {\n  public a: number = 0; // Ok, инициализация при объявлении\n  public b: number; // Ok, инициализация в конструкторе\n  public c: number | undefined; // Ok, явное указание принадлежности к типу Undefined\n  public d: number; // Error, инициализация отсутствует\n  constructor() {\n      this.b = 0;\n  }\n}\n`````"},{"key":"Опции компилятора_71","elementId":"esModuleInterop","markdown":"## esModuleInterop\n\n\n`--esModuleInterop` - с активной опцией сгенерированный код таких модулей формата _CommonJS_/_AMD_/_UMD_ больше походит на код, сгенерированный _Babel_.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"esModuleInterop\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_72","elementId":"emitDeclarationsOnly","markdown":"## emitDeclarationsOnly\n\n\n`--emitDeclarationsOnly` - данная опция указывает компилятору, что нужно генерировать только файлы декларации с расширением `.d.ts` и пропускать файлы с расширением `.js` и `.jsx`. Такое поведение может быть полезно, если код, помимо компилятора _TypeScript_, компилируется ещё и с помощью _Babel_.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"emitDeclarationsOnly\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_73","elementId":"resolveJsonModule","markdown":"## resolveJsonModule\n\n\n`--resolveJsonModule` - данная опция, при активной опции `--esModuleInterop`\nи опции `--module`, установленной в `commonjs`, позволяет в среде _NodeJS_ полноценно взаимодействовать с _json_.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"resolveJsonModule\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n`````ts\n// file config.json\n\n{\n  \"name\": \"\",\n  \"age\": 0\n}\n\n// file index.js\n\n\nimport config from \"./config.json\";\n\nconfig.name = 'name'; // Ok\nconfig.name = 0; // Error\n\n\n// tsconfig.json\n\n\n{\n   \"compilerOptions\": {\n       \"module\": \"commonjs\",\n       \"resolveJsonModule\": true,\n       \"esModuleInterop\": true\n   }\n}\n`````"},{"key":"Опции компилятора_74","elementId":"declarationMap","markdown":"## declarationMap\n\n\n`--declarationMap` - при совместном использовании с активной опцией `--declaration` заставляет компилятор, помимо `.d.ts`, также генерировать `.d.ts.map`, которые позволяют при переходе к определению (go to definition) направлять в файл `.ts`, а не `.d.ts`.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"declarationMap\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_75","elementId":"strictBindCallApply","markdown":"## strictBindCallApply\n\n\n`--strictBindCallApply` - текущий флаг, входящий в группировку `--strict`, активирует проверку вызова таких методов, как `apply`, `call` и `bind`. Это стало возможным благодаря добавлению двух новых типов, `CallableFunction` и `NewableFunction`, которые содержат обобщенное описание методов `apply`, `call` и `bind`, как для обычных функций, так и для функций конструкторов соответственно.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"strictBindCallApply\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n`````ts\nfunction f(p0: number, p1: string){}\n\n\nf.call(null, 0, ''); // ok\nf.call(null, 0, 0); // error\nf.call(null, 0); // error\nf.call(null, 0, '', 0); // error\n\nf.apply(null, [0, '']); // ok\nf.apply(null, [0, 0]); // error\nf.apply(null, [0]); // error\nf.apply(null, [0, '', 0]); // error\n\nf.bind(null, 0, ''); // ok\nf.bind(null, 0, 0); // error\nf.bind(null, 0); // ok\nf.bind(null, 0, '', 0); // ok\n`````"},{"key":"Опции компилятора_76","elementId":"showConfig","markdown":"## showConfig\n\n\n`--showConfig` - при активном текущем флаге компилятор `tsc` во время компиляции выведет в консоль содержимое конфигурационного файла `tsconfig.json`, разрешенного с учетом механизма расширения (`extends`), если таковой механизм имеет место быть. Этот функционал может быть очень полезным при отладке.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"showConfig\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_77","elementId":"build","markdown":"## build\n\n\n`--build` - данный флаг указывает компилятору `tsc`, что проект нужно собирать как проект, использующий ссылки на другие проекты. Подробнее об этом можно узнать из главы [Сборка с использованием ссылок на проекты](../057.(Сборка)%20Сборка%20с%20использованием%20ссылок%20на%20проекты). Также флаг `--build` может использоваться в сочетании со специфичными только для него флагами `--verbose`, `--dry`, `--clean`, `--force`, а также с флагом `--watch`.\n\n\n**type**: `string`\n**default**: ``\n**values**: `paths to tsconfig.json or dir with tsconfig.json`"},{"key":"Опции компилятора_78","elementId":"verbose","markdown":"## verbose\n\n\n`--verbose` - текущий флаг указывает компилятору выводить более подробный отчет при инкрементальной сборке проекта. Используется только совместно с флагом `--build`."},{"key":"Опции компилятора_79","elementId":"dry","markdown":"## dry\n\n\n`--dry` - при указании текущего флага сборка будет выполнена без порождения выходных файлов. Данный флаг полезно использовать совместно с флагом `--verbose`. Используется только совместно с флагом `--build`."},{"key":"Опции компилятора_80","elementId":"clean","markdown":"## clean\n\n\n`--clean` - удаляет выходные файлы, соответствующие заданным входным. Используется только совместно с флагом `--build`."},{"key":"Опции компилятора_81","elementId":"force","markdown":"## forceConsistentCasingInFileNames\n\n\n`--forceConsistentCasingInFileNames` - запрещает несогласованные ссылки на один и тот же файл.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"forceConsistentCasingInFileNames\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n##  help (h)\n\n\n`--help` или `-h` - выводит список доступных опций.\n\n`````ts\ntsc --help\ntsc -h\n`````\n\n\n## importHelpers\n\n\n`--importHelpers` - импортирует таких помощников (helpers), как `__extends`, `__rest` и т.д.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"importHelpers\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n## isolatedModules\n\n\n`--isolatedModules` - транслирует каждый файл, как отдельный модуль.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"isolatedModules\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n## listEmittedFiles\n\n\n`--listEmittedFiles` - выводит список сгенерированных файлов.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"listEmittedFiles\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n## listFiles\n\n\n`--listFiles` - выводит список участвующих в компиляции файлов.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"listFiles\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n## sourceRoot\n\n\n`--sourceRoot` - в качестве значения принимает базовый путь до директории, в которой лежат исходники `.ts`, необходимые для ассоциации с _source map_.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"sourceRoot\": \"\"\n  }\n}\n`````\n\n**type**: `string`\n**default**: `\"\"`\n**values**: `path to source  .ts dir`\n\n\n## mapRoot\n\n\n`--mapRoot` - место, откуда будут браться файлы `.map.js`.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"mapRoot\": \"\"\n  }\n}\n`````\n\n**type**: `string`\n**default**: `\"\"`\n**values**: ``\n\n\n## maxNodeModuleJsDepth\n\n\n`--maxNodeModuleJsDepth` - максимальная глубина поиска зависимостей в `/node_modules` и загрузки файлов `.js`. Работает только с активной опцией `--allowJs`.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"maxNodeModuleJsDepth\": 0\n  }\n}\n`````\n\n**type**: `number`\n**default**: `0`\n**values**: `0...n`\n\n\n## project (p)\n\n\n`--project` или `-p` - с помощью этого флага можно указать как путь до директории, которая содержит `tsconfig.json`, так и на конкретный `tsconfig.json` файл.\n\n`````ts\ntsc --project\ntsc -p ./configs/tsconfig.es6.json\n`````\n\n**type**: `string`\n**default**: ``\n**values**: `path to tsconfig.json`\n\n\n## init\n\n\n`--init` - создает новый `tsconfig.json` со всеми доступными опциями, большинство из которых закомментировано, дабы создать оптимальную конфигурацию.\n\n`````sh\ntsc --init\n`````\n\n\n## version (v)\n\n\n`--version` или `-v` - выводит информацию о текущей версии _TypeScript_.\n\n`````sh\ntsc --version\ntsc -v\n`````\n\n\n## watch (w)\n\n\n`--watch` или `-w` - запускает компилятор в режиме наблюдения за изменением файлов. При каждом изменении отслеживаемых файлов компиляция будет запущена автоматически.\n\n`````sh\ntsc --watch\ntsc -w\n`````\n\n\n## preserveSymlinks\n\n\n`--preserveSymlinks` - текущая опция демонстрирует поведение, идентичное реализуемому в _NodeJS_ с активным флагом `--preserve-symlinks`. При активной опции символические ссылки на модели (modules) и пакеты (packages) разрешаются относительно файла символической ссылки, а не относительно пути, к которому разрешается символическая ссылка. Кроме того, поведение при активной текущей опции противоположно поведению, предоставляемому _Webpack_ с помощью флага со схожим по смыслу названием `resolve.symlinks`.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"preserveSymlinks\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n## strictFunctionTypes\n\n\n`--strictFunctionTypes` - при активной опции параметры функций начинают сравниваться по контрвариантным правилам, в, то время, как при не активной опции, сравнения производятся по бивариантным правилам.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"strictFunctionTypes\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n## locale\n\n\n`--locale` - позволяет указать один из заданных языков для вывода диагностических сообщений.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"locale\": \"en\" | \"cs\" | \"de\" | \"es\" | \"fr\" | \"it\" | \"ja\" | \"ko\" | \"pl\" | \"pt-BR\" | \"ru\" | \"tr\" | \"zh-CN\" | \"zh-TW\" |\n  }\n}\n`````\n\n\n\n**type**: `string`\n**default**: `platform specific`\n**values**: English (US): `en`,Czech: `cs`,German: `de`,Spanish: `es`,French: `fr`,Italian: `it`,Japanese: `ja`,Korean: `ko`,Polish: `pl`,Portuguese(Brazil): `pt-BR`,Russian: `ru`,Turkish: `tr`,Simplified Chinese: `zh-CN`,Traditional Chinese: `zh-TW`\n\n\n## strictPropertyInitialization\n\n\n`--strictPropertyInitialization` - при активной опции в случае, когда в классе присутствуют поля, не инициализированные в момент создания или в конструкторе, возникает ошибка. Более подробно данная тема раскрыта в главе [“Классы - Definite Assignment Assertion Modifier”](../028.(Классы)%20Definite%20Assignment%20Assertion%20Modifier).\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"strictPropertyInitialization\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n`````ts\nclass Identifier {\n  public a: number = 0; // Ok, инициализация при объявлении\n  public b: number; // Ok, инициализация в конструкторе\n  public c: number | undefined; // Ok, явное указание принадлежности к типу Undefined\n  public d: number; // Error, инициализация отсутствует\n  constructor() {\n      this.b = 0;\n  }\n}\n`````\n\n\n## esModuleInterop\n\n\n`--esModuleInterop` - с активной опцией сгенерированный код таких модулей формата _CommonJS_/_AMD_/_UMD_ больше походит на код, сгенерированный _Babel_.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"esModuleInterop\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n## emitDeclarationsOnly\n\n\n`--emitDeclarationsOnly` - данная опция указывает компилятору, что нужно генерировать только файлы декларации с расширением `.d.ts` и пропускать файлы с расширением `.js` и `.jsx`. Такое поведение может быть полезно, если код, помимо компилятора _TypeScript_, компилируется ещё и с помощью _Babel_.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"emitDeclarationsOnly\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n## resolveJsonModule\n\n\n`--resolveJsonModule` - данная опция, при активной опции `--esModuleInterop`\nи опции `--module`, установленной в `commonjs`, позволяет в среде _NodeJS_ полноценно взаимодействовать с _json_.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"resolveJsonModule\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n`````ts\n// file config.json\n\n{\n  \"name\": \"\",\n  \"age\": 0\n}\n\n// file index.js\n\n\nimport config from \"./config.json\";\n\nconfig.name = 'name'; // Ok\nconfig.name = 0; // Error\n\n\n// tsconfig.json\n\n\n{\n   \"compilerOptions\": {\n       \"module\": \"commonjs\",\n       \"resolveJsonModule\": true,\n       \"esModuleInterop\": true\n   }\n}\n`````\n\n\n## declarationMap\n\n\n`--declarationMap` - при совместном использовании с активной опцией `--declaration` заставляет компилятор, помимо `.d.ts`, также генерировать `.d.ts.map`, которые позволяют при переходе к определению (go to definition) направлять в файл `.ts`, а не `.d.ts`.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"declarationMap\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n## strictBindCallApply\n\n\n`--strictBindCallApply` - текущий флаг, входящий в группировку `--strict`, активирует проверку вызова таких методов, как `apply`, `call` и `bind`. Это стало возможным благодаря добавлению двух новых типов, `CallableFunction` и `NewableFunction`, которые содержат обобщенное описание методов `apply`, `call` и `bind`, как для обычных функций, так и для функций конструкторов соответственно.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"strictBindCallApply\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n`````ts\nfunction f(p0: number, p1: string){}\n\n\nf.call(null, 0, ''); // ok\nf.call(null, 0, 0); // error\nf.call(null, 0); // error\nf.call(null, 0, '', 0); // error\n\nf.apply(null, [0, '']); // ok\nf.apply(null, [0, 0]); // error\nf.apply(null, [0]); // error\nf.apply(null, [0, '', 0]); // error\n\nf.bind(null, 0, ''); // ok\nf.bind(null, 0, 0); // error\nf.bind(null, 0); // ok\nf.bind(null, 0, '', 0); // ok\n`````\n\n\n## showConfig\n\n\n`--showConfig` - при активном текущем флаге компилятор `tsc` во время компиляции выведет в консоль содержимое конфигурационного файла `tsconfig.json`, разрешенного с учетом механизма расширения (`extends`), если таковой механизм имеет место быть. Этот функционал может быть очень полезным при отладке.\n\n`````ts\n{\n  \"compilerOptions\": {\n      \"showConfig\": false\n  }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n## build\n\n\n`--build` - данный флаг указывает компилятору `tsc`, что проект нужно собирать как проект, использующий ссылки на другие проекты. Подробнее об этом можно узнать из главы [Сборка с использованием ссылок на проекты](../057.(Сборка)%20Сборка%20с%20использованием%20ссылок%20на%20проекты). Также флаг `--build` может использоваться в сочетании со специфичными только для него флагами `--verbose`, `--dry`, `--clean`, `--force`, а также с флагом `--watch`.\n\n\n**type**: `string`\n**default**: ``\n**values**: `paths to tsconfig.json or dir with tsconfig.json`\n\n\n## verbose\n\n\n`--verbose` - текущий флаг указывает компилятору выводить более подробный отчет при инкрементальной сборке проекта. Используется только совместно с флагом `--build`.\n\n\n## dry\n\n\n`--dry` - при указании текущего флага сборка будет выполнена без порождения выходных файлов. Данный флаг полезно использовать совместно с флагом `--verbose`. Используется только совместно с флагом `--build`.\n\n\n## clean\n\n\n`--clean` - удаляет выходные файлы, соответствующие заданным входным. Используется только совместно с флагом `--build`.\n\n\n## force\n\n\n`--force` - принудительно выполняет не инкрементальную сборку. Используется только совместно с флагом `--build`."},{"key":"Опции компилятора_82","elementId":"incremental","markdown":"## incremental\n\n\n`--incremental` - флаг, при активации которого, после первой компиляции проекта, в заданной атрибутом `outDir` директории создается файл `.tsbuildinfo`, который хранит метаинформацию об изменении файлов, что позволяет производить ускоренные инкрементальные сборки при всех последующих запусках компилятора.\n\n`````ts\n{\n    \"compilerOptions\": {\n        \"incremental\": true,\n        \"outDir\": \"./dest\"\n    }\n}\n`````\n\nВ случае, когда имя выходного файла задается с помощью флага `--outFile`, имя генерируемого файла `.tsbuildinfo` будет включать в себя название выходного файла (`.client.tsbuildinfo` для файла `client.js` и `.server.tsbuildinfo` для `server.js` соответственно).\n\n**Примечание:** создатели _TypeScript_ заранее предупреждают, что генерируемые файлы `.tsbuildinfo` не предназначены для использования сторонними библиотеками, так как их определение не будет обладать совместимостью от версии к версии.\n\nКроме того, с помощью флага `--tsBuildInfoFile` можно задать место сохранения файла `.tsbuildinfo`.\n\n`````ts\n{\n    \"compilerOptions\": {\n        \"incremental\": true,\n        \"tsBuildInfoFile\": \"./buildinfo\",\n        \"outDir\": \"./dest\"\n    }\n}\n`````"},{"key":"Опции компилятора_83","elementId":"tsBuildInfoFile","markdown":"## tsBuildInfoFile\n\n\n`--tsBuildInfoFile` - флаг, с помощью которого указывается место сохранения файла `.tsbuildinfo`, генерирующегося при активной опции `--incremental` и служащего для хранения метаинформации, призванной ускорить последующие сборки.\n\n\n`````ts\n{\n    \"compilerOptions\": {\n        \"incremental\": true,\n        \"tsBuildInfoFile\": \"./buildinfo\",\n    }\n}\n`````"},{"key":"Опции компилятора_84","elementId":"allowUmdGlobalAccess","markdown":"## allowUmdGlobalAccess\n\n\n`--allowUmdGlobalAccess` - при активном текущем флаге становится возможным обращение к глобальным определениям из модулей.\n\n\n`````ts\n{\n    \"compilerOptions\": {\n        \"allowUmdGlobalAccess\": false,\n    }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n`````ts\n// allowUmdGlobalAccess === false\n\nimport * as Rx from 'rxjs';\n\nconst ref = React.createRef(); // Error, обращение к глобальным переменным в модулях недопустимо\n`````\n\n`````ts\n// allowUmdGlobalAccess === true\n\nimport * as Rx from 'rxjs';\n\nconst ref = React.createRef(); // Ok, доступ к глобальному определению из модуля\n`````"},{"key":"Опции компилятора_85","elementId":"disableSourceOfProjectReferenceRedirect","markdown":"## disableSourceOfProjectReferenceRedirect\n\n\n`--disableSourceOfProjectReferenceRedirect` - при использовании механизма ссылок на проекты активация данного флага говорит компилятору, что в качестве информации о типах следует использовать файлы декларации `.d.ts`, а не исходные файлы проекта. Активация данного флага способна повысить производительность сборки, но вносит некоторую специфику, поэтому уместна лишь на больших проектах. Более подробно читайте об этом в главе, посвященной использованию ссылок на проекты.\n\n\n`````ts\n{\n    \"compilerOptions\": {\n        \"disableSourceOfProjectReferenceRedirect\": false,\n    }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_86","elementId":"useDefineForClassFields","markdown":"## useDefineForClassFields\n\n\n`--useDefineForClassFields` - данный флаг активирует новое поведение генерации конечного кода, доступное с версии `v3.7` и предназначенное для предотвращения переопределения свойств при механизме наследования.\n\n[Важно] Начиная с версии `4.0` логика компилятора _TypeScript_ подразумевает не переопределяемое поведение равнозначное поведению при активном текущем флаге.\n\n\n`````ts\n{\n    \"compilerOptions\": {\n        \"useDefineForClassFields\": false,\n    }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_87","elementId":"importsNotUsedAsValues","markdown":"## importsNotUsedAsValues\n\n\n`--importsNotUsedAsValues` - задает стратегию используемую компилятором для разрешения зависимостей модуля путем уточнения формы импорта и экспорта. Более подробно о текущем флаге можно прочесть в главе \"Импорт и экспорт только типа и флаг --importsNotUsedAsValues\".\n\n\n`````ts\n{\n    \"compilerOptions\": {\n        \"importsNotUsedAsValues\": \"remove\",\n    }\n}\n`````\n\n**type**: `string`\n**default**: `remove`\n**values**: `remove`, `preserve`, `error`"},{"key":"Опции компилятора_88","elementId":"assumeChangesOnlyAffectDirectDependencies","markdown":"## assumeChangesOnlyAffectDirectDependencies\n\n\n`--assumeChangesOnlyAffectDirectDependencies` - в режиме `--watch` + `--incremental` активация данной опции позволяет компилятору отказаться от перепроверок\\перестраивания файлов, которые на основе метаинформации расцениваются затронутыми. Вместо этого будут перепроверяться\\перестраиваться только непосредственно изменённые файлы и файлы их импортирующие.\n\nПредставьте, что `fileA.ts` импортирует `fileB.ts`, который импортирует `fileC.ts`, который импортирует `fileD.td`.\n\nПри активном режиме `--watch` изменения в файле `fileD.ts` означает, что как минимум будут проверены `fileC.ts`, `fileB.ts` и `fileA.ts`. При активной опции `--assumeChangesOnlyAffectDirectDependencies` проверке подвергнется лишь `fileA.ts` и `fileB.ts`.\n\n`````json\n// tsconfig.json\n\n{\n    \"watchOptions\": {\n        \"assumeChangesOnlyAffectDirectDependencies\": \"false\"\n    }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_89","elementId":"watchFile","markdown":"## watchFile\n\n\n`--watchFile` - стратегия наблюдения за отдельными файлами.\n\n\n`````json\n// tsconfig.json\n\n{\n    \"watchOptions\": {\n        \"watchFile\": \"useFsEvents\"\n    }\n}\n`````\n\n**type**: `string`\n**default**: `useFsEvents`\n**values**: `fixedPollingInterval`, `priorityPollingInterval`, `dynamicPriorityPolling`, `useFsEvents`, `useFsEventsOnParentDirectory`\n\n**описание**\n- `fixedPollingInterval`: Проверять каждый файл на наличие изменений несколько раз в секунду с фиксированным интервалом.\n- `priorityPollingInterval`: Проверять каждый файл на наличие изменений несколько раз в секунду, но использовать эвристику для проверки файлов определенных типов реже, чем других.\n- `dynamicPriorityPolling`: Использовать динамическую очередь, в которой менее часто изменяемые файлы будут проверяться реже.\n- `useFsEvents` [ПО УМОЛЧАНИЮ]: Пытаться использовать собственные события операционной системы / файловой системы для изменения файлов.\n- `useFsEventsOnParentDirectory`: Пытаться использовать собственные события операционной системы/файловой системы для прослушивания изменений в каталогах, содержащих файл. Это может использовать меньше файловых наблюдателей, но также быть менее точным."},{"key":"Опции компилятора_90","elementId":"watchDirectory","markdown":"## watchDirectory\n\n\n`--watchDirectory` - стратегия наблюдения за целыми деревьями каталогов в системах, в которых отсутствует рекурсивная функция наблюдения за файлами.\n\n\n`````json\n// tsconfig.json\n\n{\n    \"watchOptions\": {\n        \"watchDirectory\": \"useFsEvents\"\n    }\n}\n`````\n\n**type**: `string`\n**default**: `useFsEvents`\n**values**: `fixedPollingInterval`, `dynamicPriorityPolling`, `useFsEvents`\n\n**описание**\n- `fixedPollingInterval`: Проверять каждый каталог на наличие изменений несколько раз в секунду с фиксированным интервалом.\n- `dynamicPriorityPolling`: Использовать динамическую очередь, в которой менее часто изменяемые каталоги будут проверяться реже.\n- `useFsEvents`[ПО УМОЛЧАНИЮ]: Пытаться использовать собственные события операционной системы / файловой системы для изменений каталога."},{"key":"Опции компилятора_91","elementId":"fallbackPolling","markdown":"## fallbackPolling\n\n\n`--fallbackPolling` - при использовании событий файловой системы этот параметр определяет стратегию опроса, которая используется, когда в системе заканчиваются собственные наблюдатели файлов и/или не поддерживаются собственные средства просмотра файлов.\n\n\n`````json\n// tsconfig.json\n\n{\n    \"watchOptions\": {\n        \"fallbackPolling\": \"dynamicPriorityPolling\"\n    }\n}\n`````\n\n**type**: `string`\n**default**: `useFsEvents`\n**values**: `fixedPollingInterval`, `dynamicPriorityPolling`, `priorityPollingInterval`\n\n**описание**\n- `fixedPollingInterval`: Проверять каждый файл на наличие изменений несколько раз в секунду с фиксированным интервалом.\n- `dynamicPriorityPolling`: Использовать динамическую очередь, в которой менее часто изменяемые файлы будут проверяться реже.\n- `priorityPollingInterval`: Проверять каждый файл на наличие изменений несколько раз в секунду, но использовать эвристику для проверки файлов определенных типов реже, чем других."},{"key":"Опции компилятора_92","elementId":"synchronousWatchDirectory","markdown":"## synchronousWatchDirectory\n\n\n`--synchronousWatchDirectory` - отключить отложенное наблюдение за каталогами.\n\n`````json\n// tsconfig.json\n\n{\n    \"watchOptions\": {\n        \"synchronousWatchDirectory\": \"false\"\n    }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_93","elementId":"noUncheckedIndexedAccess","markdown":"## noUncheckedIndexedAccess\n\n\n`--noUncheckedIndexedAccess` - при активной текущей опции обращаться к динамическим членам объекта разрешается только после подтверждения их существования, а также совместно с такими механизмами как опциональный оператор `!.` или оператор опциональной последовательности `?.` .\n\n`````json\n// @filename: tsconfig.json\n\n{\n    \"watchOptions\": {\n        \"noUncheckedIndexedAccess\": \"true\"\n    }\n}\n`````\n\n**type**: `boolean`\n**default**: `true`\n**values**: `true`, `false`\n\n`````json\n// @filename: tsconfig.json\n\n{\n    \"compilerOptions\": {\n        \"noUncheckedIndexedAccess\": false\n    }\n}\n`````\n\n`````ts\ntype T = {\n    [key: string]: number | string;\n}\n\nfunction f(p: T) {\n    /**\n     * Обращение к несуществующим полям\n     */\n    p.bad.toString(); // Ok -> Ошибка времени исполнения\n    p[Math.random()].toString(); // Ok -> Ошибка времени исполнения\n}\n`````\n\n\n`````json\n// @filename: tsconfig.json\n\n{\n    \"compilerOptions\": {\n        \"noUncheckedIndexedAccess\": true\n    }\n}\n`````\n\n`````ts\ntype T = {\n  [key: string]: number | string;\n}\n\n\nfunction f0(p: T) {\n  /**\n   * Обращение к несуществующим полям\n   */\n  p.bad.toString(); // Error -> Object is possibly 'undefined'.ts(2532)\n  p[Math.random()].toString(); // Error -> Object is possibly 'undefined'.ts(2532)\n\n\n  // Проверка наличия поля bad\n  if(\"bad\" in p){\n      p.bad?.toString(); // Ok\n  }\n\n  // Использование опционального оператора\n  p[Math.random()]!.toString(); // Ok -> ошибка во время выполнения\n\n  p[Math.random()]?.toString();  // Ok -> Ошибка не возникнет\n}\n\nfunction f1(array: string[]) {\n    for(let i = 0; i < array.length; i++){\n        array[i].toString(); // Error -> Object is possibly 'undefined'.\n    }\n}\n`````"},{"key":"Опции компилятора_94","elementId":"noPropertyAccessFromIndexSignature","markdown":"## noPropertyAccessFromIndexSignature\n\n\n`--noPropertyAccessFromIndexSignature` - активирует поведение запрещающее обращение через точечную нотацию к динамическим членам объекта определяющего строковую индексную сигнатуру,\n\n`````json\n// @filename: tsconfig.json\n\n{\n    \"compilerOptions\": {\n        \"noPropertyAccessFromIndexSignature\": \"false\"\n    }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`\n\n\n`````ts\ntype Settings = {\n    env?: string[]; // определение необязательного предопределенного поля\n\n    [key: string]: any; // определение динамических полей\n}\n\n\nfunction configurate(settings: Settings){\n    //---------------------------\n    // динамическое поле\n    if(settings.envs){ // Ошибка при активном флаге и Ok при не активном\n\n    }\n    if(settings['envs']){ // Ok при любом значении флага\n\n    }\n\n    //----------------------------\n    // предопределенное поле\n    if(settings.env){ // Ok [1]\n\n    }\n    if(settings['env']){ // Ok при любом значении флага\n\n    }\n}\n`````"},{"key":"Опции компилятора_95","elementId":"explainFiles","markdown":"## explainFiles\n\n\n`--explainFiles` - команда, позволяющая выводить информацию о зависимостях проекта не только в консоль, но и файл, или даже открывать в _visual studio code_.\n\n`````bash\n// вывод в файл\ntsc --explainFiles > explanation.txt\n    \n// вывод в редактор vsc\ntsc --explainFiles | code -\n`````"},{"key":"Опции компилятора_96","elementId":"noImplicitOverride","markdown":"## noImplicitOverride\n\n\n`--noImplicitOverride` - активирует механизм предотвращающий объявление суперклассом членов уже объявленных в его потомках.\n\n`````json\n// @filename: tsconfig.json\n\n{\n    \"compilerOptions\": {\n        \"noImplicitOverride\": \"false\"\n    }\n}\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_97","elementId":"useUnknownInCatchVariables","markdown":"## useUnknownInCatchVariables\n\n\n`--useUnknownInCatchVariables` - при активном флаге единственный параметр блока `catch` принадлежит к типу `unknown`. Иначе, к типу `any`.\nДанный флаг входит в состав группировки `strict`.\n\n`````json\n// @filename: tsconfig.json\n\n{\n    \"compilerOptions\": {\n        \"useUnknownInCatchVariables\": \"true\"\n    }\n}\n`````\n\n`````ts\ntry {\n    \n}catch(error){\n    /**\n     * useUnknownInCatchVariables === true - error is unknown\n     * useUnknownInCatchVariables === false - error is any\n     */\n}\n`````\n\n**type**: `boolean`\n**default**: `true`\n**values**: `true`, `false`"},{"key":"Опции компилятора_98","elementId":"exactOptionalPropertyTypes","markdown":"## exactOptionalPropertyTypes\n\n\n`--exactOptionalPropertyTypes` - при активном флаге запрещается присваивать значение `undefined` необязательным полям объекта без явной принадлежности к типу `undefined`.\n\n`````json\n// @filename: tsconfig.json\n\n{\n    \"compilerOptions\": {\n        \"exactOptionalPropertyTypes\": \"false\"\n    }\n}\n`````\n\n`````ts\n// exactOptionalPropertyTypes = true\n\ntype T = {\n    a: number;\n    b?: string;\n}\n\nlet o: T = {\n    a: 5,\n    b: undefined // Error -> Type 'undefined' is not assignable to type 'string'.ts(2322)\n};\n`````\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_99","elementId":"preserveValueImports","markdown":"## preserveValueImports\n\n\n`--preserveValueImports` - отключение механизма исключающего из сборки импортированные, но не используемые конструкции.\n\n`````json\n// @filename: tsconfig.json\n\n{\n    \"compilerOptions\": {\n        \"preserveValueImports\": \"false\"\n    }\n}\n`````\n\n\n**type**: `boolean`\n**default**: `false`\n**values**: `true`, `false`"},{"key":"Опции компилятора_100","elementId":"moduleSuffixes","markdown":"## moduleSuffixes\n\n\n`--moduleSuffixes` - указывает правила для разрешения модулей на основе расширений.\n\n\n`````json\n{\n    \"compilerOptions\": {\n        \"moduleSuffixes\": [\".ios\", \".native\", \"\"]\n    }\n}\n`````\n\nПри конфигурации выше, код ниже..\n`````ts\nimport * as x from \"./x\";\n`````\n\n..будет разрешен таким образом, что сначала осуществится поиск `./x.ios`, затем `./x.native` и наконец `./x.ts`.\nСтоит обратить внимает, что указание пустой строки в качестве элемента параметра `moduleSuffixes` требуется для указания поиска файлов с расширением `.ts` и это значение является значение по умолчанию.\n\n\n**type**: `string`\n**default**: `[\"\"]`\n**values**: `.*`"}],"githubFileInfo":{"lastUpdate":1650966028000,"contributorAll":[{"name":"nauchikus","avatar":"https://avatars.githubusercontent.com/u/31518738?v=4","bio":"@TechnoFanatic(\"🍬\")\r\n","githubUrl":"https://github.com/nauchikus"}]},"pageNav":{"isPrevPage":true,"isNextPage":true,"prevPage":{"title":"Публикация TypeScript","path":"Publikaciya_TypeScript"},"nextPage":{"title":"","path":""}},"contentNavData":{"key":"Опции компилятора","level":0,"index":62,"contentIndex":0,"section":"Компилятор","title":"Опции компилятора","path":"Opcii_kompilyatora","elementId":"Opcii_kompilyatora","children":[{"key":"Опции компилятора_0","index":0,"contentIndex":1,"level":1,"section":"Компилятор","title":"strict","path":"strict","elementId":"strict"},{"key":"Опции компилятора_1","index":1,"contentIndex":2,"level":1,"section":"Компилятор","title":"suppressExcessPropertyErrors","path":"suppressExcessPropertyErrors","elementId":"suppressExcessPropertyErrors"},{"key":"Опции компилятора_2","index":2,"contentIndex":3,"level":1,"section":"Компилятор","title":"suppressImplicitAnyIndexErrors","path":"suppressImplicitAnyIndexErrors","elementId":"suppressImplicitAnyIndexErrors"},{"key":"Опции компилятора_3","index":3,"contentIndex":4,"level":1,"section":"Компилятор","title":"noImplicitAny","path":"noImplicitAny","elementId":"noImplicitAny"},{"key":"Опции компилятора_4","index":4,"contentIndex":5,"level":1,"section":"Компилятор","title":"checkJs","path":"checkJs","elementId":"checkJs"},{"key":"Опции компилятора_5","index":5,"contentIndex":6,"level":1,"section":"Компилятор","title":"JSX","path":"JSX","elementId":"JSX"},{"key":"Опции компилятора_6","index":6,"contentIndex":7,"level":1,"section":"Компилятор","title":"jsxFactory","path":"jsxFactory","elementId":"jsxFactory"},{"key":"Опции компилятора_7","index":7,"contentIndex":8,"level":1,"section":"Компилятор","title":"target (t)","path":"target_(t)","elementId":"target_(t)"},{"key":"Опции компилятора_8","index":8,"contentIndex":9,"level":1,"section":"Компилятор","title":"extends","path":"extends","elementId":"extends"},{"key":"Опции компилятора_9","index":9,"contentIndex":10,"level":1,"section":"Компилятор","title":"alwaysStrict","path":"alwaysStrict","elementId":"alwaysStrict"},{"key":"Опции компилятора_10","index":10,"contentIndex":11,"level":1,"section":"Компилятор","title":"strictNullChecks","path":"strictNullChecks","elementId":"strictNullChecks"},{"key":"Опции компилятора_11","index":11,"contentIndex":12,"level":1,"section":"Компилятор","title":"stripInternal","path":"stripInternal","elementId":"stripInternal"},{"key":"Опции компилятора_12","index":12,"contentIndex":13,"level":1,"section":"Компилятор","title":"noImplicitThis","path":"noImplicitThis","elementId":"noImplicitThis"},{"key":"Опции компилятора_13","index":13,"contentIndex":14,"level":1,"section":"Компилятор","title":"noImplicitUseStrict","path":"noImplicitUseStrict","elementId":"noImplicitUseStrict"},{"key":"Опции компилятора_14","index":14,"contentIndex":15,"level":1,"section":"Компилятор","title":"baseUrl","path":"baseUrl","elementId":"baseUrl"},{"key":"Опции компилятора_15","index":15,"contentIndex":16,"level":1,"section":"Компилятор","title":"paths","path":"paths","elementId":"paths"},{"key":"Опции компилятора_16","index":16,"contentIndex":17,"level":1,"section":"Компилятор","title":"rootDir","path":"rootDir","elementId":"rootDir"},{"key":"Опции компилятора_17","index":17,"contentIndex":18,"level":1,"section":"Компилятор","title":"rootDirs","path":"rootDirs","elementId":"rootDirs"},{"key":"Опции компилятора_18","index":18,"contentIndex":19,"level":1,"section":"Компилятор","title":"traceResolution","path":"traceResolution","elementId":"traceResolution"},{"key":"Опции компилятора_19","index":19,"contentIndex":20,"level":1,"section":"Компилятор","title":"lib","path":"lib","elementId":"lib"},{"key":"Опции компилятора_20","index":20,"contentIndex":21,"level":1,"section":"Компилятор","title":"noLib","path":"noLib","elementId":"noLib"},{"key":"Опции компилятора_21","index":21,"contentIndex":22,"level":1,"section":"Компилятор","title":"noResolve","path":"noResolve","elementId":"noResolve"},{"key":"Опции компилятора_22","index":22,"contentIndex":23,"level":1,"section":"Компилятор","title":"noStrictGenericChecks","path":"noStrictGenericChecks","elementId":"noStrictGenericChecks"},{"key":"Опции компилятора_23","index":23,"contentIndex":24,"level":1,"section":"Компилятор","title":"preserveConstEnums","path":"preserveConstEnums","elementId":"preserveConstEnums"},{"key":"Опции компилятора_24","index":24,"contentIndex":25,"level":1,"section":"Компилятор","title":"removeComments","path":"removeComments","elementId":"removeComments"},{"key":"Опции компилятора_25","index":25,"contentIndex":26,"level":1,"section":"Компилятор","title":"noUnusedLocals","path":"noUnusedLocals","elementId":"noUnusedLocals"},{"key":"Опции компилятора_26","index":26,"contentIndex":27,"level":1,"section":"Компилятор","title":"noUnusedParameters","path":"noUnusedParameters","elementId":"noUnusedParameters"},{"key":"Опции компилятора_27","index":27,"contentIndex":28,"level":1,"section":"Компилятор","title":"skipLibCheck","path":"skipLibCheck","elementId":"skipLibCheck"},{"key":"Опции компилятора_28","index":28,"contentIndex":29,"level":1,"section":"Компилятор","title":"declarationDir","path":"declarationDir","elementId":"declarationDir"},{"key":"Опции компилятора_29","index":29,"contentIndex":30,"level":1,"section":"Компилятор","title":"types","path":"types","elementId":"types"},{"key":"Опции компилятора_30","index":30,"contentIndex":31,"level":1,"section":"Компилятор","title":"typeRoots","path":"typeRoots","elementId":"typeRoots"},{"key":"Опции компилятора_31","index":31,"contentIndex":32,"level":1,"section":"Компилятор","title":"allowUnusedLabels","path":"allowUnusedLabels","elementId":"allowUnusedLabels"},{"key":"Опции компилятора_32","index":32,"contentIndex":33,"level":1,"section":"Компилятор","title":"noImplicitReturns","path":"noImplicitReturns","elementId":"noImplicitReturns"},{"key":"Опции компилятора_33","index":33,"contentIndex":34,"level":1,"section":"Компилятор","title":"noFallthroughCasesInSwitch","path":"noFallthroughCasesInSwitch","elementId":"noFallthroughCasesInSwitch"},{"key":"Опции компилятора_34","index":34,"contentIndex":35,"level":1,"section":"Компилятор","title":"outFile","path":"outFile","elementId":"outFile"},{"key":"Опции компилятора_35","index":35,"contentIndex":36,"level":1,"section":"Компилятор","title":"allowSyntheticDefaultImports","path":"allowSyntheticDefaultImports","elementId":"allowSyntheticDefaultImports"},{"key":"Опции компилятора_36","index":36,"contentIndex":37,"level":1,"section":"Компилятор","title":"allowUnreachableCode","path":"allowUnreachableCode","elementId":"allowUnreachableCode"},{"key":"Опции компилятора_37","index":37,"contentIndex":38,"level":1,"section":"Компилятор","title":"allowJs","path":"allowJs","elementId":"allowJs"},{"key":"Опции компилятора_38","index":38,"contentIndex":39,"level":1,"section":"Компилятор","title":"reactNamespace","path":"reactNamespace","elementId":"reactNamespace"},{"key":"Опции компилятора_39","index":39,"contentIndex":40,"level":1,"section":"Компилятор","title":"pretty","path":"pretty","elementId":"pretty"},{"key":"Опции компилятора_40","index":40,"contentIndex":41,"level":1,"section":"Компилятор","title":"moduleResolution","path":"moduleResolution","elementId":"moduleResolution"},{"key":"Опции компилятора_41","index":41,"contentIndex":42,"level":1,"section":"Компилятор","title":"exclude","path":"exclude","elementId":"exclude"},{"key":"Опции компилятора_42","index":42,"contentIndex":43,"level":1,"section":"Компилятор","title":"noEmitHelpers","path":"noEmitHelpers","elementId":"noEmitHelpers"},{"key":"Опции компилятора_43","index":43,"contentIndex":44,"level":1,"section":"Компилятор","title":"newLine","path":"newLine","elementId":"newLine"},{"key":"Опции компилятора_44","index":44,"contentIndex":45,"level":1,"section":"Компилятор","title":"inlineSourceMap","path":"inlineSourceMap","elementId":"inlineSourceMap"},{"key":"Опции компилятора_45","index":45,"contentIndex":46,"level":1,"section":"Компилятор","title":"inlineSources","path":"inlineSources","elementId":"inlineSources"},{"key":"Опции компилятора_46","index":46,"contentIndex":47,"level":1,"section":"Компилятор","title":"noEmitOnError","path":"noEmitOnError","elementId":"noEmitOnError"},{"key":"Опции компилятора_47","index":47,"contentIndex":48,"level":1,"section":"Компилятор","title":"noEmit","path":"noEmit","elementId":"noEmit"},{"key":"Опции компилятора_48","index":48,"contentIndex":49,"level":1,"section":"Компилятор","title":"charset","path":"charset","elementId":"charset"},{"key":"Опции компилятора_49","index":49,"contentIndex":50,"level":1,"section":"Компилятор","title":"diagnostics","path":"diagnostics","elementId":"diagnostics"},{"key":"Опции компилятора_50","index":50,"contentIndex":51,"level":1,"section":"Компилятор","title":"declaration","path":"declaration","elementId":"declaration"},{"key":"Опции компилятора_51","index":51,"contentIndex":52,"level":1,"section":"Компилятор","title":"downlevelIteration","path":"downlevelIteration","elementId":"downlevelIteration"},{"key":"Опции компилятора_52","index":52,"contentIndex":53,"level":1,"section":"Компилятор","title":"emitBOM","path":"emitBOM","elementId":"emitBOM"},{"key":"Опции компилятора_53","index":53,"contentIndex":54,"level":1,"section":"Компилятор","title":"emitDecoratorMetadata","path":"emitDecoratorMetadata","elementId":"emitDecoratorMetadata"},{"key":"Опции компилятора_54","index":54,"contentIndex":55,"level":1,"section":"Компилятор","title":"forceConsistentCasingInFileNames","path":"forceConsistentCasingInFileNames","elementId":"forceConsistentCasingInFileNames"},{"key":"Опции компилятора_55","index":55,"contentIndex":56,"level":1,"section":"Компилятор","title":"help (h)","path":"help_(h)","elementId":"help_(h)"},{"key":"Опции компилятора_56","index":56,"contentIndex":57,"level":1,"section":"Компилятор","title":"importHelpers","path":"importHelpers","elementId":"importHelpers"},{"key":"Опции компилятора_57","index":57,"contentIndex":58,"level":1,"section":"Компилятор","title":"isolatedModules","path":"isolatedModules","elementId":"isolatedModules"},{"key":"Опции компилятора_58","index":58,"contentIndex":59,"level":1,"section":"Компилятор","title":"listEmittedFiles","path":"listEmittedFiles","elementId":"listEmittedFiles"},{"key":"Опции компилятора_59","index":59,"contentIndex":60,"level":1,"section":"Компилятор","title":"listFiles","path":"listFiles","elementId":"listFiles"},{"key":"Опции компилятора_60","index":60,"contentIndex":61,"level":1,"section":"Компилятор","title":"sourceRoot","path":"sourceRoot","elementId":"sourceRoot"},{"key":"Опции компилятора_61","index":61,"contentIndex":62,"level":1,"section":"Компилятор","title":"mapRoot","path":"mapRoot","elementId":"mapRoot"},{"key":"Опции компилятора_62","index":62,"contentIndex":63,"level":1,"section":"Компилятор","title":"maxNodeModuleJsDepth","path":"maxNodeModuleJsDepth","elementId":"maxNodeModuleJsDepth"},{"key":"Опции компилятора_63","index":63,"contentIndex":64,"level":1,"section":"Компилятор","title":"project (p)","path":"project_(p)","elementId":"project_(p)"},{"key":"Опции компилятора_64","index":64,"contentIndex":65,"level":1,"section":"Компилятор","title":"init","path":"init","elementId":"init"},{"key":"Опции компилятора_65","index":65,"contentIndex":66,"level":1,"section":"Компилятор","title":"version (v)","path":"version_(v)","elementId":"version_(v)"},{"key":"Опции компилятора_66","index":66,"contentIndex":67,"level":1,"section":"Компилятор","title":"watch (w)","path":"watch_(w)","elementId":"watch_(w)"},{"key":"Опции компилятора_67","index":67,"contentIndex":68,"level":1,"section":"Компилятор","title":"preserveSymlinks","path":"preserveSymlinks","elementId":"preserveSymlinks"},{"key":"Опции компилятора_68","index":68,"contentIndex":69,"level":1,"section":"Компилятор","title":"strictFunctionTypes","path":"strictFunctionTypes","elementId":"strictFunctionTypes"},{"key":"Опции компилятора_69","index":69,"contentIndex":70,"level":1,"section":"Компилятор","title":"locale","path":"locale","elementId":"locale"},{"key":"Опции компилятора_70","index":70,"contentIndex":71,"level":1,"section":"Компилятор","title":"strictPropertyInitialization","path":"strictPropertyInitialization","elementId":"strictPropertyInitialization"},{"key":"Опции компилятора_71","index":71,"contentIndex":72,"level":1,"section":"Компилятор","title":"esModuleInterop","path":"esModuleInterop","elementId":"esModuleInterop"},{"key":"Опции компилятора_72","index":72,"contentIndex":73,"level":1,"section":"Компилятор","title":"emitDeclarationsOnly","path":"emitDeclarationsOnly","elementId":"emitDeclarationsOnly"},{"key":"Опции компилятора_73","index":73,"contentIndex":74,"level":1,"section":"Компилятор","title":"resolveJsonModule","path":"resolveJsonModule","elementId":"resolveJsonModule"},{"key":"Опции компилятора_74","index":74,"contentIndex":75,"level":1,"section":"Компилятор","title":"declarationMap","path":"declarationMap","elementId":"declarationMap"},{"key":"Опции компилятора_75","index":75,"contentIndex":76,"level":1,"section":"Компилятор","title":"strictBindCallApply","path":"strictBindCallApply","elementId":"strictBindCallApply"},{"key":"Опции компилятора_76","index":76,"contentIndex":77,"level":1,"section":"Компилятор","title":"showConfig","path":"showConfig","elementId":"showConfig"},{"key":"Опции компилятора_77","index":77,"contentIndex":78,"level":1,"section":"Компилятор","title":"build","path":"build","elementId":"build"},{"key":"Опции компилятора_78","index":78,"contentIndex":79,"level":1,"section":"Компилятор","title":"verbose","path":"verbose","elementId":"verbose"},{"key":"Опции компилятора_79","index":79,"contentIndex":80,"level":1,"section":"Компилятор","title":"dry","path":"dry","elementId":"dry"},{"key":"Опции компилятора_80","index":80,"contentIndex":81,"level":1,"section":"Компилятор","title":"clean","path":"clean","elementId":"clean"},{"key":"Опции компилятора_81","index":81,"contentIndex":82,"level":1,"section":"Компилятор","title":"force","path":"force","elementId":"force"},{"key":"Опции компилятора_82","index":82,"contentIndex":83,"level":1,"section":"Компилятор","title":"incremental","path":"incremental","elementId":"incremental"},{"key":"Опции компилятора_83","index":83,"contentIndex":84,"level":1,"section":"Компилятор","title":"tsBuildInfoFile","path":"tsBuildInfoFile","elementId":"tsBuildInfoFile"},{"key":"Опции компилятора_84","index":84,"contentIndex":85,"level":1,"section":"Компилятор","title":"allowUmdGlobalAccess","path":"allowUmdGlobalAccess","elementId":"allowUmdGlobalAccess"},{"key":"Опции компилятора_85","index":85,"contentIndex":86,"level":1,"section":"Компилятор","title":"disableSourceOfProjectReferenceRedirect","path":"disableSourceOfProjectReferenceRedirect","elementId":"disableSourceOfProjectReferenceRedirect"},{"key":"Опции компилятора_86","index":86,"contentIndex":87,"level":1,"section":"Компилятор","title":"useDefineForClassFields","path":"useDefineForClassFields","elementId":"useDefineForClassFields"},{"key":"Опции компилятора_87","index":87,"contentIndex":88,"level":1,"section":"Компилятор","title":"importsNotUsedAsValues","path":"importsNotUsedAsValues","elementId":"importsNotUsedAsValues"},{"key":"Опции компилятора_88","index":88,"contentIndex":89,"level":1,"section":"Компилятор","title":"assumeChangesOnlyAffectDirectDependencies","path":"assumeChangesOnlyAffectDirectDependencies","elementId":"assumeChangesOnlyAffectDirectDependencies"},{"key":"Опции компилятора_89","index":89,"contentIndex":90,"level":1,"section":"Компилятор","title":"watchFile","path":"watchFile","elementId":"watchFile"},{"key":"Опции компилятора_90","index":90,"contentIndex":91,"level":1,"section":"Компилятор","title":"watchDirectory","path":"watchDirectory","elementId":"watchDirectory"},{"key":"Опции компилятора_91","index":91,"contentIndex":92,"level":1,"section":"Компилятор","title":"fallbackPolling","path":"fallbackPolling","elementId":"fallbackPolling"},{"key":"Опции компилятора_92","index":92,"contentIndex":93,"level":1,"section":"Компилятор","title":"synchronousWatchDirectory","path":"synchronousWatchDirectory","elementId":"synchronousWatchDirectory"},{"key":"Опции компилятора_93","index":93,"contentIndex":94,"level":1,"section":"Компилятор","title":"noUncheckedIndexedAccess","path":"noUncheckedIndexedAccess","elementId":"noUncheckedIndexedAccess"},{"key":"Опции компилятора_94","index":94,"contentIndex":95,"level":1,"section":"Компилятор","title":"noPropertyAccessFromIndexSignature","path":"noPropertyAccessFromIndexSignature","elementId":"noPropertyAccessFromIndexSignature"},{"key":"Опции компилятора_95","index":95,"contentIndex":96,"level":1,"section":"Компилятор","title":"explainFiles","path":"explainFiles","elementId":"explainFiles"},{"key":"Опции компилятора_96","index":96,"contentIndex":97,"level":1,"section":"Компилятор","title":"noImplicitOverride","path":"noImplicitOverride","elementId":"noImplicitOverride"},{"key":"Опции компилятора_97","index":97,"contentIndex":98,"level":1,"section":"Компилятор","title":"useUnknownInCatchVariables","path":"useUnknownInCatchVariables","elementId":"useUnknownInCatchVariables"},{"key":"Опции компилятора_98","index":98,"contentIndex":99,"level":1,"section":"Компилятор","title":"exactOptionalPropertyTypes","path":"exactOptionalPropertyTypes","elementId":"exactOptionalPropertyTypes"},{"key":"Опции компилятора_99","index":99,"contentIndex":100,"level":1,"section":"Компилятор","title":"preserveValueImports","path":"preserveValueImports","elementId":"preserveValueImports"},{"key":"Опции компилятора_100","index":100,"contentIndex":101,"level":1,"section":"Компилятор","title":"moduleSuffixes","path":"moduleSuffixes","elementId":"moduleSuffixes"}]},"pageDescription":"Опции компилятора"},"__N_SSG":true}